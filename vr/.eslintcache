[{"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\App.js":"1","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\index.js":"2","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\routeMap.js":"3","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\index.js":"4","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\index.js":"5","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\index.js":"6","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\config.js":"7","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Perviews\\index.js":"8","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reportWebVitals.js":"9","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Edit\\index.js":"10","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reducers.js":"11","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Demo\\index.js":"12","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\rootReducer.js":"13","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reselect.js":"14","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\ExhibitionView\\index.js":"15","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Header\\index.js":"16","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Admin\\AdminList\\index.js":"17","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\api\\index.js":"18","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\utils\\request\\index.js":"19","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\utils\\request\\requestConfig.js":"20","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Perviews\\index.js":"21","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\reselect.js":"22","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\reducers.js":"23","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Edit\\index.js":"24"},{"size":256,"mtime":1611047734042,"results":"25","hashOfConfig":"26"},{"size":873,"mtime":1610436319529,"results":"27","hashOfConfig":"26"},{"size":1225,"mtime":1614496132386,"results":"28","hashOfConfig":"29"},{"size":1173,"mtime":1614477468307,"results":"30","hashOfConfig":"26"},{"size":572,"mtime":1614482537224,"results":"31","hashOfConfig":"26"},{"size":1833,"mtime":1614477425673,"results":"32","hashOfConfig":"26"},{"size":498,"mtime":1610518911726,"results":"33","hashOfConfig":"26"},{"size":17703,"mtime":1614485310604,"results":"34","hashOfConfig":"26"},{"size":362,"mtime":1609224057157,"results":"35","hashOfConfig":"29"},{"size":7570,"mtime":1614477452691,"results":"36","hashOfConfig":"26"},{"size":9854,"mtime":1614222212254,"results":"37","hashOfConfig":"26"},{"size":4285,"mtime":1614477408645,"results":"38","hashOfConfig":"29"},{"size":367,"mtime":1610518898811,"results":"39","hashOfConfig":"26"},{"size":1506,"mtime":1614137367010,"results":"40","hashOfConfig":"26"},{"size":12908,"mtime":1614477648722,"results":"41","hashOfConfig":"26"},{"size":433,"mtime":1613715670365,"results":"42","hashOfConfig":"29"},{"size":3968,"mtime":1614497320044,"results":"43","hashOfConfig":"29"},{"size":412,"mtime":1614497145643,"results":"44","hashOfConfig":"29"},{"size":2327,"mtime":1614496873386,"results":"45","hashOfConfig":"29"},{"size":2266,"mtime":1614485726310,"results":"46","hashOfConfig":"29"},{"size":16075,"mtime":1614506857472,"results":"47","hashOfConfig":"29"},{"size":1562,"mtime":1614495028165,"results":"48","hashOfConfig":"29"},{"size":5979,"mtime":1614507583049,"results":"49","hashOfConfig":"29"},{"size":11789,"mtime":1614507641570,"results":"50","hashOfConfig":"29"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"adzifw",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k0clgz",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\App.js",[],["103","104"],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\routeMap.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\config.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Perviews\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reportWebVitals.js",[],["105","106"],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Edit\\index.js",["107","108","109","110","111","112","113"],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reducers.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Demo\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\rootReducer.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reselect.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\ExhibitionView\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Header\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Admin\\AdminList\\index.js",["114","115","116"],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\api\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\utils\\request\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\utils\\request\\requestConfig.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Perviews\\index.js",["117","118","119","120","121"],"import React, { useEffect, useRef, useMemo } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport * as THREE from 'three'\r\nimport OrbitControls from 'three-orbitcontrols'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// import { selectVrData } from '../reselect'\r\n\r\nimport { BrowserRouter as Router, Route, Switch, useParams, useLocation } from 'react-router-dom'\r\n\r\nimport {\r\n    selectIsHotspot,\r\n    selectIsDelete,\r\n    selectActiveId,\r\n    selectPanoramicData,\r\n    selectAutoRotate,\r\n} from '../reselect'\r\nimport { actions } from '../reducers'\r\n\r\nimport qs from 'qs'\r\n// import { Button, Switch } from 'antd'\r\n\r\nimport fore from 'static/images/huisuo.jpg'\r\nimport huisuo from 'static/images/huisuo.jpg'\r\nimport haibian from 'static/images/haibian.jpg'\r\nimport keting from 'static/images/keting.jpg'\r\nimport haozhai from 'static/images/haozhai.jpg'\r\nimport gif from 'static/images/zhe.gif'\r\n\r\nimport hotspot from 'static/images/hotspot.jpg'\r\nimport './index.css'\r\n\r\nconst forType = 'Equirectangular'\r\n// 控制器 对象\r\nconst Preview = props => {\r\n    const location = useLocation()\r\n    const query = useMemo(() => {\r\n        return qs.parse(location.search.slice(1))\r\n    }, [location.search])\r\n    const dispatch = useDispatch()\r\n    // const OnLineProject = useSelector(selectVrData())\r\n    const isHotspot = useSelector(selectIsHotspot()) // 是否投放跳转点 删除\r\n    const isDelete = useSelector(selectIsDelete()) // 是否投放跳转点 删除\r\n    const autoRotate = useSelector(selectAutoRotate())\r\n\r\n    // 可展示數據\r\n    const panoramicData = useSelector(selectPanoramicData()) // 项目数据\r\n    const activeId = useSelector(selectActiveId()) // 当前高亮视图ID\r\n    const refIsHotspot = useRef(isHotspot)\r\n    const refIsDelete = useRef(isDelete)\r\n    const drawedHotspotsData = useRef([])\r\n\r\n    // 1、 根据路由获取当前场景数据\r\n    useEffect(() => {\r\n        // 获取当前编辑数据 初始化数据只存在\r\n        // setTimeout(() => {\r\n        //     dispatch(\r\n        //         actions.changeProjectData({\r\n        //             name: '想放弃了',\r\n        //             id: '2102271653',\r\n        //             url: '',\r\n        //             status: '',\r\n        //             scene_list: [],\r\n        //         })\r\n        //     )\r\n        // }, 3000)\r\n        return () => {}\r\n    }, [query])\r\n\r\n    let scene = new THREE.Scene()\r\n    //  1、 透视相机                        可查看视野角度            长宽比                     近截面 和远截面\r\n    let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1500)\r\n    /**\r\n     *  透视相机四个参数 ：视野角度\r\n     *      长宽比\r\n     *      近截面\r\n     *      远截面\r\n     **/\r\n    let renderer = new THREE.WebGLRenderer({ antialias: true })\r\n\r\n    let controls\r\n    let mesh\r\n\r\n    // 设置全场唯一canvas\r\n\r\n    useEffect(() => {\r\n        changeView(activeId ? activeId : '2102271653')\r\n       \r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [activeId])\r\n\r\n    useEffect(() => {\r\n        refIsHotspot.current = isHotspot\r\n        refIsDelete.current = isDelete\r\n    }, [isHotspot, isDelete])\r\n\r\n    const changeView = id => {\r\n        // 初始化锚点数据\r\n        drawedHotspotsData.current = []\r\n        let showVr = []\r\n        if (panoramicData.length > 0) {\r\n            panoramicData.forEach(item => {\r\n                if (item.id === id) {\r\n                    showVr.push(item)\r\n                    // 锚点 切换场景应当切换锚点数据\r\n                    drawedHotspotsData.current = item.anchor_list\r\n                }\r\n            })\r\n            console.log(panoramicData, '--showVr--', showVr)\r\n            init(panoramicData[0].url)\r\n      }\r\n      \r\n  }\r\n  useEffect(() => {\r\n    if (panoramicData.length > 0) {\r\n      init(panoramicData[0].url)\r\n    }\r\n  }, [panoramicData])\r\n\r\n    //  初始化\r\n  const init = (imgurl = fore) => {\r\n      console.log(imgurl,'----imgurl')\r\n        // 初始化先删除子节点\r\n        let container = document.getElementById('container')\r\n        if (container.childNodes.length) {\r\n            container.removeChild(container.childNodes[0])\r\n        }\r\n        let vrImgurl =\r\n            imgurl === 'imgurl'\r\n                ? huisuo\r\n                : imgurl === 'haibian'\r\n                ? haibian\r\n                : imgurl === 'keting'\r\n                ? keting\r\n                : imgurl === 'haozhai'\r\n                ? haozhai\r\n                : huisuo\r\n        console.log(vrImgurl, '---vrImgurl')\r\n        mesh && scene.remove(mesh)\r\n        let width = document.getElementById('container').getBoundingClientRect().width\r\n        let height = document.getElementById('container').getBoundingClientRect().height - 32\r\n        if ([vrImgurl].length > 1) {\r\n            alert('抱歉，一张图请选择panorama1，六张图请选择panorama6且只支持cubeFaces')\r\n            return\r\n        }\r\n        // //  三维坐标轴\r\n        // var axesHelper = new THREE.AxesHelper(150);\r\n        // scene.add(axesHelper);\r\n\r\n        camera.target = new THREE.Vector3(0, 0, 0) // 调用该函数的结果将复制给该Vector3对象。\r\n        camera.position.set(-10, 0, -10)\r\n        // SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength)\r\n        // - radius：球体半径\r\n        // - widthSegments,\r\n        // - heightSegments：水平方向和垂直方向上分段数。widthSegments最小值为3，默认值为8。heightSegments最小值为2，默认值为6。\r\n        // - phiStart：水平方向上的起始角,默认值0\r\n        // - phiLenght：水平方向上球体曲面覆盖的弧度，默认Math.PI * 2\r\n        // - thetaStart : 垂直方向上的起始角， 默认0\r\n        // - thetaLength: 垂直方向是球体曲面覆盖的弧度，默认值为Math.PI\r\n        const geometry = new THREE.SphereGeometry(500, 60, 40)\r\n        geometry.scale(-1, 1, 1)\r\n\r\n        let demo = new THREE.TextureLoader().load(vrImgurl)\r\n        let material = new THREE.MeshBasicMaterial({\r\n            map: demo, // 此处使用 demo 的参数 图片更为清晰\r\n            transparent: false,\r\n        })\r\n        mesh = new THREE.Mesh(geometry, material)\r\n        // 几何体  材料（渲染图）\r\n        scene.add(mesh)\r\n        //画已经保存的热点\r\n        setTimeout(() => {\r\n            drawJumpHotSpots(drawedHotspotsData.current, '')\r\n            // addDsc()\r\n        }, 0)\r\n        renderer.setPixelRatio(window.devicePixelRatio)\r\n        //确保区域大小\r\n        renderer.setSize(width, height)\r\n        // 添加前 先删除之前的子元素 再添加新VR图\r\n        container.appendChild(renderer.domElement)\r\n\r\n        // 当鼠标指针移动到元素上方，并按下鼠标按键（左、右键均可）\r\n        document\r\n            .getElementsByTagName('canvas')[0]\r\n            .addEventListener('mousedown', onDocumentMouseDown, false)\r\n        // document\r\n        //     .getElementsByTagName('canvas')[0]\r\n        //     .addEventListener('mousemove', onDocumentMouseMove, false)\r\n        // document\r\n        //     .getElementsByTagName('canvas')[0]\r\n        //     .addEventListener('mouseup', onDocumentMouseUp, false)\r\n        animate()\r\n        initcontrols()\r\n    }\r\n    // 初始化控制器\r\n    const initcontrols = () => {\r\n        controls = new OrbitControls(camera, renderer.domElement)\r\n        console.log(controls, '--controls')\r\n        //是否可以缩放\r\n        controls.enableZoom = false\r\n        //是否自动旋转\r\n        controls.autoRotate = autoRotate\r\n        // 使动画循环使用时阻尼或自转 意思是否有惯性\r\n        controls.enableDamping = true\r\n        controls.zoom0 = 0\r\n        controls.zoomSpeed = 0\r\n    }\r\n\r\n    // 执行渲染\r\n    // const update = () => {\r\n    //     //控制自动旋转速度\r\n    //     if (isUserInteracting === false) {\r\n    //         lon += 0\r\n    //     }\r\n    //     lat = Math.max(-85, Math.min(85, lat))\r\n    //     phi = THREE.Math.degToRad(90 - lat)\r\n    //     theta = THREE.Math.degToRad(lon) //degToRad()方法返回与参数degrees所表示的角度相等的弧度值\r\n    //     camera.target.x = 500 * Math.sin(phi) * Math.cos(theta)\r\n    //     camera.target.y = 500 * Math.cos(phi)\r\n    //     camera.target.z = 500 * Math.sin(phi) * Math.sin(theta)\r\n    //     camera.lookAt(camera.target)\r\n    //     renderer.render(scene, camera)\r\n    // }\r\n\r\n    // 递归调用\r\n    const animate = () => {\r\n        controls && controls.update()\r\n        requestAnimationFrame(animate)\r\n        renderer.render(scene, camera)\r\n    }\r\n\r\n    //绘制多个跳转热点\r\n    const drawJumpHotSpots = (variable, newsrc) => {\r\n        console.log(variable, '数据')\r\n        variable.length> 0 && variable.forEach(item => {\r\n            // let position = item.point\r\n            // TextureLoader 异步记载图片\r\n            var texture = new THREE.TextureLoader().load(gif)\r\n            // SpriteMaterial 材质\r\n            var spriteMaterial = new THREE.SpriteMaterial({\r\n                map: texture,\r\n                transparent: true,\r\n            })\r\n            // 物体 Sprite\r\n            var sprite = new THREE.Sprite(spriteMaterial)\r\n            sprite.scale.set(30, 30, 30)\r\n            /**\r\n             * 此处添加自定义属性 不能跟原有属性重复避免报错\r\n             * name: 添加锚点名称\r\n             * ids: 唯一ID\r\n             * iconUrl: 图标\r\n             */\r\n            sprite.name = item.name\r\n            sprite.ids = item.id\r\n            sprite.iconUrl = ''\r\n            let rate = 0.8\r\n            var endV = new THREE.Vector3(item.x_axis * rate, item.Y_axis * rate, item.z_axis * rate)\r\n            sprite.position.copy(endV)\r\n            scene.add(sprite)\r\n        })\r\n    }\r\n\r\n    // 鼠標点击添加一个 确定点击位置  --  锚点 ---待配置 热点图片\r\n    const onDocumentMouseDown = event => {\r\n        /**\r\n     * 1、 camera.target 当前相机所正视的世界空间方向 赋值给 vector\r\n     * 2、根据配置页面 展示的宽高值 设置XYZ 轴\r\n     * 3、 vector.unproject(camera) 在投影中使用的摄像机。\r\n     * 4、 使用 光线投射Raycaster 计算鼠标在三维坐标中点击的坐标位置\r\n     *     这将创建一个新的raycaster对象。\r\n     *        let raycaster = new THREE.Raycaster(\r\n     *            camera.position,\r\n     *            vector.sub(camera.position).normalize() //初始化\r\n     *        )\r\n     *      Raycaster( origin : Vector3, direction : Vector3, near : Float, far : Float ) {\r\n            origin —— 光线投射的原点向量。\r\n            direction —— 向射线提供方向的方向向量，应当被标准化。\r\n            near —— 返回的所有结果比near远。near不能为负值，其默认值为0。\r\n            far —— 返回的所有结果都比far近。far不能小于near，其默认值为Infinity（正无穷。）\r\n     * \r\n     * \r\n     * \r\n     * \r\n    */\r\n        // isUserInteracting = true\r\n        if (forType === 'Equirectangular') {\r\n            event.preventDefault()\r\n            // let vector = new THREE.Vector3() //三维坐标对象\r\n            let vector = camera.target\r\n            console.log(vector, 'vector预计是坐标轴的位置')\r\n            vector.set(\r\n                ((event.clientX - 248) / (window.innerWidth - 248)) * 2 - 1,\r\n                -((event.clientY - 32) / (window.innerHeight - 32)) * 2 + 1,\r\n                0.5\r\n            )\r\n            // 在投影中使用的摄像机。\r\n            vector.unproject(camera)\r\n            // 这将创建一个新的raycaster对象。\r\n            let raycaster = new THREE.Raycaster(\r\n                camera.position,\r\n                vector.sub(camera.position).normalize() //初始化 光线投射的原点向量\r\n            )\r\n            raycaster.camera = camera\r\n            // 得到 点击的坐标 或 点击的标注点\r\n            // intersects 每项中的object 的type 可以分辨 点击的是标注还是 场景图\r\n            let intersects = raycaster.intersectObjects(scene.children)\r\n            //如果绘制热点属于激活状态\r\n            // 此处需要判断 是否有两个坐标为0\r\n            let isOnShaft = []\r\n            Object.keys(intersects[0].point).forEach(v => {\r\n                if (intersects[0].point[v] === 0) {\r\n                    isOnShaft.push(1)\r\n                }\r\n            })\r\n            // 添加標注\r\n            if (refIsHotspot.current && isOnShaft.length < 2 && !refIsDelete.current) {\r\n                let img = new Image()\r\n                //这里发布的时候会出现http://localhost:8083/web/dist/static/images/hotspot.jpg\r\n                // img.src = \"www.baidu.com/img/flexible/logo/pc/result.png\";\r\n                //发布用\r\n                img.src = hotspot\r\n                img.onload = function () {\r\n                    // let texture = new THREE.TextureLoader().load(img)\r\n                    // // TextureLoader 异步记载图片\r\n                    // var texture = new THREE.TextureLoader().load(gif)\r\n                    // // SpriteMaterial 材质\r\n                    // var spriteMaterial = new THREE.SpriteMaterial({\r\n                    //     map: texture,\r\n                    //     transparent: true,\r\n                    // })\r\n                    let texture = new THREE.Texture(img)\r\n                    texture.needsUpdate = true\r\n                    texture.minFilter = THREE.LinearFilter\r\n                    var spriteMaterial = new THREE.SpriteMaterial({\r\n                        map: texture,\r\n                        transparent: false,\r\n                    })\r\n                    // 创建一个 sprite  物体\r\n                    var sprite = new THREE.Sprite(spriteMaterial)\r\n                    sprite.scale.set(30, 30, 30) // 视图大小\r\n                    let rate = 0.8\r\n                    var endV = new THREE.Vector3(\r\n                        intersects[0].point.x * rate,\r\n                        intersects[0].point.y * rate,\r\n                        intersects[0].point.z * rate\r\n                    )\r\n                    sprite.position.copy(endV)\r\n                    scene.add(sprite)\r\n                    addHotspot(intersects[0].point)\r\n                }\r\n                //移除热点\r\n            } else {\r\n                if (!refIsDelete.current) return\r\n                if (intersects.length > 0) {\r\n                    const target = intersects[0]\r\n                    console.log(!refIsHotspot.current, refIsDelete.current, '删除打印结果')\r\n                    try {\r\n                        if (target.object && target.object.type.length > 0) {\r\n                            if (target.object.type.toLowerCase() === 'sprite') {\r\n                                scene.remove(target.object)\r\n                            }\r\n                        }\r\n                    } catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 添加后将数据同步redux 数组中\r\n    const addHotspot = coordinate => {\r\n        console.log(coordinate, '---coordinate')\r\n        let newAnchorPoint = {\r\n            x_axis: coordinate.x,\r\n            y_axis: coordinate.y,\r\n            z_axis: coordinate.z,\r\n            id: '',\r\n            name: '这是一个锚点',\r\n            iconUrl: '',\r\n            targect_scene_id: uuidv4(),\r\n            url: '',\r\n            status:''\r\n        }\r\n        dispatch(actions.addAnchorPoint(newAnchorPoint))\r\n    }\r\n\r\n    // redux 配置\r\n    // const isHotspotChange = () => {\r\n    //     dispatch(actions.changeIsHotspot(!isHotspot))\r\n    // }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div id='container' className='panoramaContent'></div>\r\n        </div>\r\n    )\r\n}\r\nexport default Preview\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\reselect.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\reducers.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Edit\\index.js",["122","123","124","125"],"import React, { useState, useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// imoprt styles from './index.less'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { actions } from '../reducers'\r\nimport {\r\n    selectIsHotspot,\r\n    selectIsDelete,\r\n    selectPanoramicData,\r\n    selectProjectData,\r\n    selectActiveId,\r\n    selectAutoRotate,\r\n} from '../reselect'\r\n\r\nimport {\r\n    Switch,\r\n    Menu,\r\n    Form,\r\n    Input,\r\n    Select,\r\n    Space,\r\n    Card,\r\n    TreeSelect,\r\n    Collapse,\r\n    Modal,\r\n    Button,\r\n    Upload,\r\n} from 'antd'\r\nimport { PlusSquareOutlined, UploadOutlined } from '@ant-design/icons'\r\n\r\nconst { SubMenu } = Menu\r\nconst { Option } = Select\r\nconst { TreeNode } = TreeSelect\r\nconst { Panel } = Collapse\r\nconst Edit = () => {\r\n    const dispatch = useDispatch()\r\n    const isHotspot = useSelector(selectIsHotspot())\r\n    const isDelete = useSelector(selectIsDelete())\r\n    const panoramicData = useSelector(selectPanoramicData()) // 项目数据\r\n    const projectData = useSelector(selectProjectData()) // 项目数据\r\n    const activeId = useSelector(selectActiveId()) // 当前高亮视图ID\r\n\r\n    const autoRotate = useSelector(selectAutoRotate())\r\n\r\n    console.log(panoramicData,'-修改后左边栏')\r\n    const [activeConfig, setActiveConfig] = useState({\r\n        // 配置信息\r\n        name: '',\r\n        id: '',\r\n        url: '',\r\n        active: true,\r\n        autoRotate: false, //是否自动旋转\r\n        // 锚点信息\r\n        anchorPoint: [\r\n            {\r\n                point: {\r\n                    x: 180.01349809670057,\r\n                    y: 15.79023683858044,\r\n                    z: 465.07418151652786,\r\n                },\r\n                id: '2102091411',\r\n                name: '海边',\r\n                iconUrl: 'haibian',\r\n            },\r\n        ],\r\n    })\r\n\r\n    const [nPjData, setNPjData] = useState({\r\n        scenceid: '',\r\n        name: '',\r\n        url: '',\r\n        is_default: 1,\r\n        status: 0,\r\n        anchor_list: [],\r\n    })\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    // 获取默认数据\r\n    useEffect(() => {\r\n        setActiveConfig(panoramicData[0])\r\n        if (panoramicData.length > 0) {\r\n            // 并打开当前场景数据\r\n            changeView(panoramicData[0].id)\r\n        }\r\n    }, [])\r\n  \r\n    const [form] = Form.useForm()\r\n\r\n    const onGenderChange = value => {\r\n        switch (value) {\r\n            case 'male':\r\n                form.setFieldsValue({ note: 'Hi, man!' })\r\n                return\r\n            case 'female':\r\n                form.setFieldsValue({ note: 'Hi, lady!' })\r\n                return\r\n            case 'other':\r\n                form.setFieldsValue({ note: 'Hi there!' })\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    // 切换场景 根据点击ID 修改场景信息\r\n    const changeView = key => {\r\n        dispatch(actions.changeVrView(key))\r\n        console.log(key)\r\n    }\r\n\r\n    const openModal = () => {\r\n        setNPjData({\r\n            uni_scene_id: '',\r\n            name: '',\r\n            url: '',\r\n            is_default: 1,\r\n            status: 0,\r\n            anchor_list: [],\r\n        })\r\n        setIsModalVisible(true)\r\n    }\r\n    // 保存数据 添加到场景数据 关闭弹窗\r\n  const handleOk = () => {\r\n      let  activeId = uuidv4()\r\n      let endScen = Object.assign(nPjData, { uni_scene_id: activeId, url: 'huisuo' })\r\n      dispatch(actions.changeVrView(activeId))\r\n      dispatch(actions.addScence(endScen))\r\n      setIsModalVisible(false)\r\n    }\r\n\r\n    // 清空参数 关闭弹窗\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    // 获取到当前高亮数据信息 展示对应的设置信息\r\n    // 如果没有切换 则默认设置 数据中第一项为 当前展示\r\n\r\n    return (\r\n        <div style={{ overflow: 'auto' }}>\r\n            <Space direction='vertical' style={{ width: '100%' }}>\r\n                <Card title='操作台' style={{ width: '100%' }}>\r\n                    <Button\r\n                        block\r\n                        icon={<PlusSquareOutlined />}\r\n                        onClick={() => {\r\n                            openModal()\r\n                        }}\r\n                        type='primary'\r\n                        ghost\r\n                    >\r\n                        添加场景\r\n                    </Button>\r\n                    <Form.Item name='' label='标注投放：'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={isHotspot}\r\n                            onChange={() => dispatch(actions.changeIsHotspot(!isHotspot))}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name='' label='是否删除标注'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={isDelete}\r\n                            onChange={() => dispatch(actions.changeIsDelete(!isDelete))}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name='' label='是否自动旋转'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={autoRotate}\r\n                            onChange={useMemo(\r\n                                () => () => dispatch(actions.changeAutoRotate(!autoRotate)),\r\n                                [autoRotate, dispatch]\r\n                            )}\r\n                        />\r\n                    </Form.Item>\r\n                </Card>\r\n                <Card title='配置信息' style={{ width: '100%' }}>\r\n                    <Form>\r\n                        <Form.Item name='' label='锚点名称' rules={[{ required: true }]}>\r\n                            <Input style={{ width: 120 }} />\r\n                        </Form.Item>\r\n                        <Form.Item name='gender' label='跳转场景' rules={[{ required: true }]}>\r\n                            <Select\r\n                                style={{ width: 120 }}\r\n                                placeholder='Select a option and change input text above'\r\n                                onChange={onGenderChange}\r\n                                allowClear\r\n                            >\r\n                                <Option value='male'>male</Option>\r\n                                <Option value='female'>female</Option>\r\n                                <Option value='other'>other</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) =>\r\n                                prevValues.gender !== currentValues.gender\r\n                            }\r\n                        >\r\n                            {({ getFieldValue }) => {\r\n                                return getFieldValue('gender') === 'other' ? (\r\n                                    <Form.Item\r\n                                        name='customizeGender'\r\n                                        label='Customize Gender'\r\n                                        rules={[{ required: true }]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                ) : null\r\n                            }}\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n                <Card title={projectData.name} style={{ width: '100%' }}>\r\n                    <Collapse onChange={changeView} accordion defaultActiveKey={[activeId]}>\r\n                        {panoramicData.map(panoramic => {\r\n                            return (\r\n                                <Panel header={panoramic.name} key={panoramic.scend}>\r\n                                    <Collapse>\r\n                                        {panoramic.anchor_list && panoramic.anchor_list.length &&\r\n                                            panoramic.anchor_list.map(anchor => {\r\n                                                return (\r\n                                                    <Panel\r\n                                                        header={anchor.name}\r\n                                                        key={anchor.id}\r\n                                                    ></Panel>\r\n                                                )\r\n                                            })}\r\n                                    </Collapse>\r\n                                </Panel>\r\n                            )\r\n                        })}\r\n                    </Collapse>\r\n                </Card>\r\n            </Space>\r\n            <Modal\r\n                title='请上传全景图'\r\n                visible={isModalVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n            >\r\n                <Form>\r\n                    <Form.Item label='锚点名称' rules={[{ required: true }]}>\r\n                        <Input\r\n                            style={{ width: 120 }}\r\n                            onChange={e => {\r\n                                setNPjData(Object.assign(nPjData, { name: e.target.value }))\r\n                            }}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item label='请上传全景图片' rules={[{ required: true }]}>\r\n                        <Upload\r\n                            onChange={e => {\r\n                                console.log(e, '文件該斌')\r\n                            }}\r\n                            listType='picture'\r\n                            beforeUpload={file => {\r\n                                console.log(file, '----')\r\n                                return new Promise(resolve => {\r\n                                    const reader = new FileReader()\r\n                                    reader.readAsDataURL(file)\r\n                                    reader.onload = () => {\r\n                                        const img = document.createElement('img')\r\n                                        img.src = reader.result\r\n                                        img.onload = () => {\r\n                                            const canvas = document.createElement('canvas')\r\n                                            canvas.width = img.naturalWidth\r\n                                            canvas.height = img.naturalHeight\r\n                                            const ctx = canvas.getContext('2d')\r\n                                            ctx.drawImage(img, 0, 0)\r\n                                            ctx.fillStyle = 'red'\r\n                                            ctx.textBaseline = 'middle'\r\n                                            ctx.font = '33px Arial'\r\n                                            ctx.fillText('Ant Design', 20, 20)\r\n                                            canvas.toBlob(resolve)\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }}\r\n                        >\r\n                            <Button icon={<UploadOutlined />}>Upload</Button>\r\n                        </Upload>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edit\r\n",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"126","replacedBy":"130"},{"ruleId":"128","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":15,"column":10,"nodeType":"134","messageId":"135","endLine":15,"endColumn":26},{"ruleId":"132","severity":1,"message":"136","line":15,"column":28,"nodeType":"134","messageId":"135","endLine":15,"endColumn":40},{"ruleId":"132","severity":1,"message":"137","line":15,"column":42,"nodeType":"134","messageId":"135","endLine":15,"endColumn":57},{"ruleId":"132","severity":1,"message":"138","line":17,"column":9,"nodeType":"134","messageId":"135","endLine":17,"endColumn":16},{"ruleId":"132","severity":1,"message":"139","line":19,"column":9,"nodeType":"134","messageId":"135","endLine":19,"endColumn":17},{"ruleId":"132","severity":1,"message":"140","line":31,"column":12,"nodeType":"134","messageId":"135","endLine":31,"endColumn":24},{"ruleId":"141","severity":1,"message":"142","line":57,"column":8,"nodeType":"143","endLine":57,"endColumn":10,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":18,"column":25,"nodeType":"147","endLine":18,"endColumn":28},{"ruleId":"145","severity":1,"message":"146","line":43,"column":17,"nodeType":"147","endLine":43,"endColumn":20},{"ruleId":"145","severity":1,"message":"146","line":45,"column":17,"nodeType":"147","endLine":45,"endColumn":20},{"ruleId":"132","severity":1,"message":"148","line":9,"column":27,"nodeType":"134","messageId":"135","endLine":9,"endColumn":33},{"ruleId":"132","severity":1,"message":"149","line":9,"column":35,"nodeType":"134","messageId":"135","endLine":9,"endColumn":40},{"ruleId":"132","severity":1,"message":"150","line":9,"column":42,"nodeType":"134","messageId":"135","endLine":9,"endColumn":48},{"ruleId":"132","severity":1,"message":"151","line":9,"column":50,"nodeType":"134","messageId":"135","endLine":9,"endColumn":59},{"ruleId":"141","severity":1,"message":"152","line":118,"column":6,"nodeType":"143","endLine":118,"endColumn":21,"suggestions":"153"},{"ruleId":"132","severity":1,"message":"138","line":32,"column":9,"nodeType":"134","messageId":"135","endLine":32,"endColumn":16},{"ruleId":"132","severity":1,"message":"139","line":34,"column":9,"nodeType":"134","messageId":"135","endLine":34,"endColumn":17},{"ruleId":"132","severity":1,"message":"140","line":47,"column":12,"nodeType":"134","messageId":"135","endLine":47,"endColumn":24},{"ruleId":"141","severity":1,"message":"142","line":86,"column":8,"nodeType":"143","endLine":86,"endColumn":10,"suggestions":"154"},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],["155"],["156"],"no-unused-vars","'AppstoreOutlined' is defined but never used.","Identifier","unusedVar","'MailOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'SubMenu' is assigned a value but never used.","'TreeNode' is assigned a value but never used.","'activeConfig' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changeView' and 'panoramicData'. Either include them or remove the dependency array.","ArrayExpression",["157"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'useParams' is defined but never used.","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["158"],["159"],"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"160","fix":"164"},"Update the dependencies array to be: [changeView, panoramicData]",{"range":"165","text":"166"},"Update the dependencies array to be: [init, panoramicData]",{"range":"167","text":"168"},{"range":"169","text":"166"},[1776,1778],"[changeView, panoramicData]",[3663,3678],"[init, panoramicData]",[2257,2259]]