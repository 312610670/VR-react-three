[{"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\App.js":"1","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\index.js":"2","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\routeMap.js":"3","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\index.js":"4","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\index.js":"5","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\index.js":"6","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\config.js":"7","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Perviews\\index.js":"8","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reportWebVitals.js":"9","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Edit\\index.js":"10","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reducers.js":"11","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Demo\\index.js":"12","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\rootReducer.js":"13","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reselect.js":"14","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\ExhibitionView\\index.js":"15","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Header\\index.js":"16","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Admin\\AdminList\\index.js":"17","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\api\\index.js":"18","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\utils\\request\\index.js":"19","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\utils\\request\\requestConfig.js":"20","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Perviews\\index.js":"21","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\reselect.js":"22","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\reducers.js":"23","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Edit\\index.js":"24","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Header\\index.js":"25","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\ExhibitionView\\index.js":"26","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Demo\\index.js":"27","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\index.js":"28"},{"size":256,"mtime":1611047734042,"results":"29","hashOfConfig":"30"},{"size":873,"mtime":1610436319529,"results":"31","hashOfConfig":"30"},{"size":1225,"mtime":1614496132386,"results":"32","hashOfConfig":"30"},{"size":1173,"mtime":1614477468307,"results":"33","hashOfConfig":"30"},{"size":572,"mtime":1614482537224,"results":"34","hashOfConfig":"30"},{"size":1833,"mtime":1614477425673,"results":"35","hashOfConfig":"30"},{"size":498,"mtime":1610518911726,"results":"36","hashOfConfig":"30"},{"size":17703,"mtime":1614485310604,"results":"37","hashOfConfig":"30"},{"size":362,"mtime":1609224057157,"results":"38","hashOfConfig":"30"},{"size":7570,"mtime":1614477452691,"results":"39","hashOfConfig":"30"},{"size":9854,"mtime":1614222212254,"results":"40","hashOfConfig":"30"},{"size":4285,"mtime":1614477408645,"results":"41","hashOfConfig":"30"},{"size":367,"mtime":1610518898811,"results":"42","hashOfConfig":"30"},{"size":1506,"mtime":1614137367010,"results":"43","hashOfConfig":"30"},{"size":12908,"mtime":1614477648722,"results":"44","hashOfConfig":"30"},{"size":433,"mtime":1613715670365,"results":"45","hashOfConfig":"30"},{"size":4884,"mtime":1614758551586,"results":"46","hashOfConfig":"30"},{"size":1017,"mtime":1614759853541,"results":"47","hashOfConfig":"30"},{"size":2327,"mtime":1614496873386,"results":"48","hashOfConfig":"30"},{"size":2266,"mtime":1614485726310,"results":"49","hashOfConfig":"50"},{"size":13083,"mtime":1614747483189,"results":"51","hashOfConfig":"30"},{"size":1562,"mtime":1614495028165,"results":"52","hashOfConfig":"30"},{"size":6063,"mtime":1614747166846,"results":"53","hashOfConfig":"30"},{"size":12931,"mtime":1614747235020,"results":"54","hashOfConfig":"30"},{"size":1804,"mtime":1614758381501,"results":"55","hashOfConfig":"30"},{"size":10804,"mtime":1614821506099,"results":"56","hashOfConfig":"30"},{"size":4285,"mtime":1614485208753,"results":"57","hashOfConfig":"30"},{"size":1181,"mtime":1614495027700,"results":"58","hashOfConfig":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"adzifw",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k0clgz",{"filePath":"102","messages":"103","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"61"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"61"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"61"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\App.js",[],["122","123"],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\routeMap.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\config.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Perviews\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reportWebVitals.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Edit\\index.js",["124","125","126","127","128","129","130"],"import React, { useState,useEffect,useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// imoprt styles from './index.less'\r\nimport { actions } from '../reducers'\r\nimport {\r\n    selectIsHotspot,\r\n    selectIsDelete,\r\n    selectPanoramicData,\r\n  selectProjectData,\r\n  selectActiveId,\r\n  selectAutoRotate\r\n} from '../reselect'\r\n\r\nimport { Switch, Menu, Form, Input, Select, Space, Card, TreeSelect, Collapse } from 'antd'\r\nimport { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons'\r\n\r\nconst { SubMenu } = Menu\r\nconst { Option } = Select\r\nconst { TreeNode } = TreeSelect\r\nconst { Panel } = Collapse\r\nconst Edit = () => {\r\n    const dispatch = useDispatch()\r\n    const isHotspot = useSelector(selectIsHotspot())\r\n    const isDelete = useSelector(selectIsDelete())\r\n    const panoramicData = useSelector(selectPanoramicData()) // 项目数据\r\n    const projectData = useSelector(selectProjectData()) // 项目数据\r\n    const activeId = useSelector(selectActiveId()) // 当前高亮视图ID\r\n    console.log(activeId, '---activeId')\r\n    const autoRotate = useSelector(selectAutoRotate())\r\n  \r\n    const [activeConfig, setActiveConfig] = useState({ //  // 配置信息\r\n      name: '',\r\n      id: '',\r\n      url: '',\r\n      active: true,\r\n      autoRotate: false, //是否自动旋转\r\n      // 锚点信息\r\n      anchorPoint: [\r\n          {\r\n              point: {\r\n                  x: 180.01349809670057,\r\n                  y: 15.79023683858044,\r\n                  z: 465.07418151652786,\r\n              },\r\n              id: '2102091411',\r\n              name: '海边',\r\n              iconUrl: 'haibian',\r\n          },\r\n      ],\r\n    })\r\n  \r\n    // 获取默认数据\r\n  useEffect(() => {\r\n    setActiveConfig( panoramicData[0])\r\n     // 并打开当前场景数据\r\n     changeView(panoramicData[0].id)\r\n    }, [])\r\n  \r\n\r\n\r\n    const [form] = Form.useForm()\r\n    const onGenderChange = value => {\r\n        switch (value) {\r\n            case 'male':\r\n                form.setFieldsValue({ note: 'Hi, man!' })\r\n                return\r\n            case 'female':\r\n                form.setFieldsValue({ note: 'Hi, lady!' })\r\n                return\r\n            case 'other':\r\n                form.setFieldsValue({ note: 'Hi there!' })\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    // 切换场景 根据点击ID 修改场景信息\r\n    const changeView = key => {\r\n        dispatch(actions.changeVrView(key))\r\n        console.log(key)\r\n  }\r\n  \r\n  useEffect(() => {\r\n    console.log(  [activeId],'-----activeId')\r\n   \r\n  }, [activeId])\r\n\r\n    // 获取到当前高亮数据信息 展示对应的设置信息\r\n    // 如果没有切换 则默认设置 数据中第一项为 当前展示\r\n\r\n    return (\r\n  \r\n  <div style={{overflow: 'auto'}}>\r\n            <Space direction='vertical' style={{ width: '100%' }}>\r\n                <Card title='操作台' style={{ width: '100%' }}>\r\n                    <Form.Item name='note' label='标注投放：'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={isHotspot}\r\n                            onChange={() => dispatch(actions.changeIsHotspot(!isHotspot))}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name='note' label='是否删除标注'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={isDelete}\r\n                            onChange={() => dispatch(actions.changeIsDelete(!isDelete))}\r\n                        />\r\n            </Form.Item>\r\n            <Form.Item name='note' label='是否自动旋转'>\r\n                            <Switch\r\n                                checkedChildren='开启'\r\n                                unCheckedChildren='关闭'\r\n                                checked={autoRotate}\r\n                                onChange={useMemo(() => () => dispatch(actions.changeAutoRotate(!autoRotate)),[autoRotate, dispatch])}\r\n                            />\r\n                        </Form.Item>\r\n                </Card>\r\n                <Card title='配置信息' style={{ width: '100%' }}>\r\n                    <Form>\r\n                        <Form.Item name='note' label='锚点名称' rules={[{ required: true }]}>\r\n                            <Input style={{ width: 120 }} />\r\n                        </Form.Item>\r\n                        <Form.Item name='gender' label='跳转场景' rules={[{ required: true }]}>\r\n                            <Select\r\n                                style={{ width: 120 }}\r\n                                placeholder='Select a option and change input text above'\r\n                                onChange={onGenderChange}\r\n                                allowClear\r\n                            >\r\n                                <Option value='male'>male</Option>\r\n                                <Option value='female'>female</Option>\r\n                                <Option value='other'>other</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) =>\r\n                                prevValues.gender !== currentValues.gender\r\n                            }\r\n                        >\r\n                            {({ getFieldValue }) => {\r\n                                return getFieldValue('gender') === 'other' ? (\r\n                                    <Form.Item\r\n                                        name='customizeGender'\r\n                                        label='Customize Gender'\r\n                                        rules={[{ required: true }]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                ) : null\r\n                            }}\r\n                        </Form.Item>\r\n                      \r\n                    </Form>\r\n                </Card>\r\n                <Card title={projectData.name} style={{ width: '100%' }}>\r\n                    <Collapse onChange={changeView} accordion  defaultActiveKey={[activeId]}>\r\n                        {panoramicData.map(panoramic => {\r\n                            return (\r\n                                <Panel header={panoramic.name} key={panoramic.id}>\r\n                                    <Collapse>\r\n                                        {panoramic.anchorPoint.length &&\r\n                                            panoramic.anchorPoint.map(anchor => {\r\n                                                return (\r\n                                                    <Panel\r\n                                                        header={anchor.name}\r\n                                                        key={anchor.id}\r\n                                                    ></Panel>\r\n                                                )\r\n                                            })}\r\n                                    </Collapse>\r\n                                </Panel>\r\n                            )\r\n                        })}\r\n                    </Collapse>\r\n                </Card>\r\n            </Space>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edit\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reducers.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Demo\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\rootReducer.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reselect.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\ExhibitionView\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Header\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Admin\\AdminList\\index.js",["131","132"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Layout, Button, Table, Tag, Space, Modal, Input, Form } from 'antd'\r\nimport { PlusSquareOutlined } from '@ant-design/icons'\r\n\r\nimport { getProjects, addProject } from '../../../api/index'\r\n\r\nconst { Header, Footer, Content } = Layout\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst columns = [\r\n    {\r\n        title: '项目',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: '创建时间',\r\n        dataIndex: 'created_at',\r\n        key: 'created_at',\r\n    },\r\n    {\r\n        title: '创建说明',\r\n        dataIndex: 'description',\r\n        key: 'description',\r\n    },\r\n    {\r\n        title: '项目状态',\r\n        dataIndex: 'status',\r\n        key: 'status',\r\n        render: status => (\r\n            <>{status === 0 ? <Tag color={'red'}>刪除</Tag> : <Tag color={'green'}>發佈</Tag>}</>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size='middle'>\r\n                <Link to={`/on-line/Exhibition?id=${text.id}`}>查看</Link>\r\n                <Link to={`/on-line/design?id=${text.id}`}>编辑</Link>\r\n                <a>删除</a>\r\n            </Space>\r\n        ),\r\n    },\r\n]\r\n\r\nconst AdminList = () => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [data, setData] = useState([])\r\n    const [form] = Form.useForm()\r\n    const [loading, setLoading] = useState(false)\r\n    // 添加数据\r\n    const submit = data => {\r\n        addProject(data)\r\n            .then(res => {\r\n                console.log(res, '--res')\r\n                setVisible(false)\r\n            })\r\n            .catch(err => {\r\n                console.log(err, '--err')\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        getProjects().then(res => {\r\n            console.log(res, '---res.data')\r\n            if (res.status === true && res.error_code === 0) {\r\n                setLoading(false)\r\n                setData(res.data)\r\n            }\r\n        })\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <Layout\r\n                style={{\r\n                    height: '100vh',\r\n                }}\r\n            >\r\n                <Layout>\r\n                    <Header className=''>\r\n                        <Button\r\n                            icon={<PlusSquareOutlined />}\r\n                            onClick={() => {\r\n                                form.resetFields()\r\n                                setVisible(true)\r\n                            }}\r\n                            type='primary'\r\n                            ghost\r\n                            size={'large'}\r\n                        >\r\n                            添加\r\n                        </Button>\r\n                    </Header>\r\n                    <Content style={{ padding: '40px' }}>\r\n                        <Table columns={columns} loading={loading} dataSource={data} rowKey='id' />\r\n                    </Content>\r\n                    <Footer>Footer</Footer>\r\n                </Layout>\r\n            </Layout>\r\n            <Modal\r\n                title='Modal'\r\n                visible={visible}\r\n                onOk={() => {\r\n                    console.log(form, 'form')\r\n                    form.validateFields()\r\n                        .then(res => {\r\n                            submit(res)\r\n                        })\r\n                        .catch(err => {})\r\n                }}\r\n                onCancel={() => {\r\n                    setVisible(false)\r\n                }}\r\n                okText='确认'\r\n                cancelText='取消'\r\n            >\r\n                <Form\r\n                    {...layout}\r\n                    form={form}\r\n                    name={'addProject'}\r\n                    onFinish={() => {\r\n                        console.log('提交表单且数据验证成功后回调事件')\r\n                    }}\r\n                    onFinishFailed={console.log('提交表单且数据验证失败后回调事件')}\r\n                >\r\n                    <Form.Item\r\n                        label='項目名稱'\r\n                        name='name'\r\n                        rules={[{ required: true, message: '填写项目名称!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label='项目描述'\r\n                        name='description'\r\n                        rules={[{ required: true, message: '请填写项目描述!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminList\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\api\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\utils\\request\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\utils\\request\\requestConfig.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Perviews\\index.js",["133","134","135","136","137","138","139","140","141"],"import React, { useEffect, useRef, useMemo, useCallback } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport * as THREE from 'three'\r\nimport OrbitControls from 'three-orbitcontrols'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// import { selectVrData } from '../reselect'\r\n\r\nimport { BrowserRouter as Router, Route, Switch, useParams, useLocation } from 'react-router-dom'\r\n\r\nimport {\r\n    selectIsHotspot,\r\n    selectIsDelete,\r\n    selectActiveId,\r\n    selectPanoramicData,\r\n    selectAutoRotate,\r\n} from '../reselect'\r\nimport { actions } from '../reducers'\r\n\r\nimport qs from 'qs'\r\n// import { Button, Switch } from 'antd'\r\n\r\nimport fore from 'static/images/huisuo.jpg'\r\nimport huisuo from 'static/images/huisuo.jpg'\r\nimport haibian from 'static/images/haibian.jpg'\r\nimport keting from 'static/images/keting.jpg'\r\nimport haozhai from 'static/images/haozhai.jpg'\r\nimport gif from 'static/images/zhe.gif'\r\n\r\nimport hotspot from 'static/images/hotspot.jpg'\r\nimport './index.css'\r\n\r\nconst forType = 'Equirectangular'\r\n// 控制器 对象\r\nconst Preview = props => {\r\n    const location = useLocation()\r\n    const query = useMemo(() => {\r\n        return qs.parse(location.search.slice(1))\r\n    }, [location.search])\r\n    const dispatch = useDispatch()\r\n    // const OnLineProject = useSelector(selectVrData())\r\n    const isHotspot = useSelector(selectIsHotspot()) // 是否投放跳转点 删除\r\n    const isDelete = useSelector(selectIsDelete()) // 是否投放跳转点 删除\r\n    const autoRotate = useSelector(selectAutoRotate())\r\n\r\n    // 可展示數據\r\n    const panoramicData = useSelector(selectPanoramicData()) // 项目数据\r\n    const activeId = useSelector(selectActiveId()) // 当前高亮视图ID\r\n    const refIsHotspot = useRef(isHotspot)\r\n    const refIsDelete = useRef(isDelete)\r\n    const drawedHotspotsData = useRef([])\r\n\r\n    // 1、 根据路由获取当前场景数据\r\n    useEffect(() => {\r\n        return () => {}\r\n    }, [query])\r\n\r\n    let scene = new THREE.Scene()\r\n    let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1500)\r\n    let renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    let controls\r\n    let mesh\r\n\r\n    useEffect(() => {\r\n        // 数据改变\r\n        console.log(panoramicData, activeId, '数据改变')\r\n        changeView(activeId)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [activeId])\r\n\r\n    useEffect(() => {\r\n        refIsHotspot.current = isHotspot\r\n        refIsDelete.current = isDelete\r\n    }, [isHotspot, isDelete])\r\n\r\n    const changeView = id => {\r\n        console.log(activeId, '---activeId', id)\r\n        // 初始化锚点数据\r\n        drawedHotspotsData.current = []\r\n        let showVr = []\r\n        console.log(panoramicData.length, panoramicData, '-panoramicData.length')\r\n        if (panoramicData.length > 0) {\r\n            panoramicData.forEach(item => {\r\n                if (item.uni_scene_id === activeId) {\r\n                    console.log(item, '-对比获取高亮数据')\r\n                    showVr.push(item)\r\n                    // 锚点 切换场景应当切换锚点数据\r\n                    drawedHotspotsData.current = item.anchor_list\r\n                }\r\n            })\r\n            console.log('初始化场景，场景数据为：', showVr[0])\r\n            init(showVr[0].url)\r\n        }\r\n    }\r\n    //  初始化\r\n    const init = (imgurl = fore) => {\r\n        console.log(imgurl, '----imgurl')\r\n        // 初始化先删除子节点\r\n        let container = document.getElementById('container')\r\n        if (container.childNodes.length) {\r\n            container.removeChild(container.childNodes[0])\r\n        }\r\n\r\n        console.log(imgurl, '---imgurl')\r\n        mesh && scene.remove(mesh)\r\n        let width = document.getElementById('container').getBoundingClientRect().width\r\n        let height = document.getElementById('container').getBoundingClientRect().height - 32\r\n        if ([imgurl].length > 1) {\r\n            alert('抱歉，一张图请选择panorama1，六张图请选择panorama6且只支持cubeFaces')\r\n            return\r\n        }\r\n        //  三维坐标轴\r\n        // var axesHelper = new THREE.AxesHelper(150);\r\n        // scene.add(axesHelper);\r\n\r\n        camera.target = new THREE.Vector3(0, 0, 0) // 调用该函数的结果将复制给该Vector3对象。\r\n        camera.position.set(-10, 0, -10)\r\n        // SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength)\r\n        // - radius：球体半径\r\n        // - widthSegments,\r\n        // - heightSegments：水平方向和垂直方向上分段数。widthSegments最小值为3，默认值为8。heightSegments最小值为2，默认值为6。\r\n        // - phiStart：水平方向上的起始角,默认值0\r\n        // - phiLenght：水平方向上球体曲面覆盖的弧度，默认Math.PI * 2\r\n        // - thetaStart : 垂直方向上的起始角， 默认0\r\n        // - thetaLength: 垂直方向是球体曲面覆盖的弧度，默认值为Math.PI\r\n        const geometry = new THREE.SphereGeometry(500, 60, 40)\r\n        geometry.scale(-1, 1, 1)\r\n\r\n        let demo = new THREE.TextureLoader().load(imgurl)\r\n        let material = new THREE.MeshBasicMaterial({\r\n            map: demo, // 此处使用 demo 的参数 图片更为清晰\r\n            transparent: false,\r\n        })\r\n        mesh = new THREE.Mesh(geometry, material)\r\n        // 几何体  材料（渲染图）\r\n        scene.add(mesh)\r\n        //画已经保存的热点\r\n        setTimeout(() => {\r\n            drawJumpHotSpots(drawedHotspotsData.current, '')\r\n            // addDsc()\r\n        }, 0)\r\n        renderer.setPixelRatio(window.devicePixelRatio)\r\n        //确保区域大小\r\n        renderer.setSize(width, height)\r\n        // 添加前 先删除之前的子元素 再添加新VR图\r\n        container.appendChild(renderer.domElement)\r\n\r\n        // 当鼠标指针移动到元素上方，并按下鼠标按键（左、右键均可）\r\n        document\r\n            .getElementsByTagName('canvas')[0]\r\n            .addEventListener('mousedown', onDocumentMouseDown, false)\r\n        animate()\r\n        initcontrols()\r\n    }\r\n    // 初始化控制器\r\n    const initcontrols = () => {\r\n        controls = new OrbitControls(camera, renderer.domElement)\r\n        console.log(controls, '--controls')\r\n        //是否可以缩放\r\n        controls.enableZoom = false\r\n        //是否自动旋转\r\n        controls.autoRotate = autoRotate\r\n        // 使动画循环使用时阻尼或自转 意思是否有惯性\r\n        controls.enableDamping = true\r\n        controls.zoom0 = 0\r\n        controls.zoomSpeed = 0\r\n    }\r\n\r\n    // 执行渲染\r\n    // const update = () => {\r\n    //     //控制自动旋转速度\r\n    //     if (isUserInteracting === false) {\r\n    //         lon += 0\r\n    //     }\r\n    //     lat = Math.max(-85, Math.min(85, lat))\r\n    //     phi = THREE.Math.degToRad(90 - lat)\r\n    //     theta = THREE.Math.degToRad(lon) //degToRad()方法返回与参数degrees所表示的角度相等的弧度值\r\n    //     camera.target.x = 500 * Math.sin(phi) * Math.cos(theta)\r\n    //     camera.target.y = 500 * Math.cos(phi)\r\n    //     camera.target.z = 500 * Math.sin(phi) * Math.sin(theta)\r\n    //     camera.lookAt(camera.target)\r\n    //     renderer.render(scene, camera)\r\n    // }\r\n\r\n    // 递归调用\r\n    const animate = () => {\r\n        controls && controls.update()\r\n        requestAnimationFrame(animate)\r\n        renderer.render(scene, camera)\r\n    }\r\n\r\n    //绘制多个跳转热点\r\n    const drawJumpHotSpots = (variable, newsrc) => {\r\n        // console.log(variable, '数据')\r\n        variable.forEach(item => {\r\n            // let position = item.point\r\n            console.log(item, '数据')\r\n            // TextureLoader 异步记载图片\r\n            var texture = new THREE.TextureLoader().load(gif)\r\n            // SpriteMaterial 材质\r\n            var spriteMaterial = new THREE.SpriteMaterial({\r\n                map: texture,\r\n                transparent: true,\r\n            })\r\n            // 物体 Sprite\r\n            var sprite = new THREE.Sprite(spriteMaterial)\r\n            sprite.scale.set(30, 30, 30)\r\n            /**\r\n             * 此处添加自定义属性 不能跟原有属性重复避免报错\r\n             * name: 添加锚点名称\r\n             * ids: 唯一ID\r\n             * iconUrl: 图标\r\n             */\r\n            sprite.name = item.name\r\n            sprite.ids = item.id\r\n            sprite.iconUrl = ''\r\n            let rate = 0.8\r\n            var endV = new THREE.Vector3(item.x_axis * rate, item.y_axis * rate, item.z_axis * rate)\r\n            sprite.position.copy(endV)\r\n            scene.add(sprite)\r\n        })\r\n    }\r\n\r\n    // 鼠標点击添加一个 确定点击位置  --  锚点 ---待配置 热点图片\r\n    const onDocumentMouseDown = event => {\r\n        if (forType === 'Equirectangular') {\r\n            event.preventDefault()\r\n            // let vector = new THREE.Vector3() //三维坐标对象\r\n            let vector = camera.target\r\n            vector.set(\r\n                ((event.clientX - 248) / (window.innerWidth - 248)) * 2 - 1,\r\n                -((event.clientY - 32) / (window.innerHeight - 32)) * 2 + 1,\r\n                0.5\r\n            )\r\n            // 在投影中使用的摄像机。\r\n            vector.unproject(camera)\r\n            // 这将创建一个新的raycaster对象。\r\n            let raycaster = new THREE.Raycaster(\r\n                camera.position,\r\n                vector.sub(camera.position).normalize() //初始化 光线投射的原点向量\r\n            )\r\n            raycaster.camera = camera\r\n            // 得到 点击的坐标 或 点击的标注点\r\n            // intersects 每项中的object 的type 可以分辨 点击的是标注还是 场景图\r\n            let intersects = raycaster.intersectObjects(scene.children)\r\n            //如果绘制热点属于激活状态\r\n            // 此处需要判断 是否有两个坐标为0\r\n            let isOnShaft = []\r\n            Object.keys(intersects[0].point).forEach(v => {\r\n                if (intersects[0].point[v] === 0) {\r\n                    isOnShaft.push(1)\r\n                }\r\n            })\r\n            // 添加標注\r\n            if (refIsHotspot.current && isOnShaft.length < 2 && !refIsDelete.current) {\r\n                let img = new Image()\r\n                img.src = hotspot\r\n                img.onload = function () {\r\n                    let texture = new THREE.Texture(img)\r\n                    texture.needsUpdate = true\r\n                    texture.minFilter = THREE.LinearFilter\r\n                    var spriteMaterial = new THREE.SpriteMaterial({\r\n                        map: texture,\r\n                        transparent: false,\r\n                    })\r\n                    // 创建一个 sprite  物体\r\n                    var sprite = new THREE.Sprite(spriteMaterial)\r\n                    sprite.scale.set(30, 30, 30) // 视图大小\r\n                    let rate = 0.8\r\n                    var endV = new THREE.Vector3(\r\n                        intersects[0].point.x * rate,\r\n                        intersects[0].point.y * rate,\r\n                        intersects[0].point.z * rate\r\n                    )\r\n                    sprite.position.copy(endV)\r\n                    scene.add(sprite)\r\n                    addHotspot(intersects[0].point)\r\n                }\r\n                //移除热点\r\n            } else {\r\n                if (!refIsDelete.current) return\r\n                if (intersects.length > 0) {\r\n                    const target = intersects[0]\r\n                    console.log(!refIsHotspot.current, refIsDelete.current, '删除打印结果')\r\n                    try {\r\n                        if (target.object && target.object.type.length > 0) {\r\n                            if (target.object.type.toLowerCase() === 'sprite') {\r\n                                scene.remove(target.object)\r\n                            }\r\n                        }\r\n                    } catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 添加后将数据同步redux 数组中\r\n    const addHotspot = coordinate => {\r\n        console.log(coordinate, '---coordinate')\r\n        let newAnchorPoint = {\r\n            x_axis: coordinate.x,\r\n            y_axis: coordinate.y,\r\n            z_axis: coordinate.z,\r\n            id: '',\r\n            name: '这是一个锚点',\r\n            iconUrl: '',\r\n            targect_scene_id: uuidv4(),\r\n            url: '',\r\n            status: '',\r\n        }\r\n        dispatch(actions.addAnchorPoint(newAnchorPoint))\r\n    }\r\n\r\n    // redux 配置\r\n    // const isHotspotChange = () => {\r\n    //     dispatch(actions.changeIsHotspot(!isHotspot))\r\n    // }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div id='container' className='panoramaContent'></div>\r\n        </div>\r\n    )\r\n}\r\nexport default Preview\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\reselect.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\reducers.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Edit\\index.js",["142","143","144"],"import React, { useState, useEffect, useMemo, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport COS from 'cos-js-sdk-v5'\r\n\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { actions } from '../reducers'\r\nimport {\r\n    selectIsHotspot,\r\n    selectIsDelete,\r\n    selectPanoramicData,\r\n    selectProjectData,\r\n    selectActiveId,\r\n    selectAutoRotate,\r\n} from '../reselect'\r\n\r\nimport {\r\n    Switch,\r\n    // Menu,\r\n    Form,\r\n    Input,\r\n    Select,\r\n    Space,\r\n    Card,\r\n    // TreeSelect,\r\n    Collapse,\r\n    Modal,\r\n    Button,\r\n    Upload,\r\n    message,\r\n} from 'antd'\r\n\r\nimport { getKey, uploadBase } from '../../../../api/index'\r\nimport { PlusSquareOutlined, UploadOutlined } from '@ant-design/icons'\r\n\r\n// const { SubMenu } = Menu\r\nconst { Option } = Select\r\n// const { TreeNode } = TreeSelect\r\nconst { Panel } = Collapse\r\nconst Edit = () => {\r\n    const dispatch = useDispatch()\r\n    const isHotspot = useSelector(selectIsHotspot())\r\n    const isDelete = useSelector(selectIsDelete())\r\n    const panoramicData = useSelector(selectPanoramicData()) // 项目数据\r\n    const projectData = useSelector(selectProjectData()) // 项目数据\r\n    const activeId = useSelector(selectActiveId()) // 当前高亮视图ID\r\n    // eslint-disable-next-line no-restricted-globals\r\n    const protocol = location.protocol === 'https:' ? 'https:' : 'http:'\r\n    // prefix 用于拼接请求 url 的前缀，域名使用存储桶的默认域名\r\n    const prefix = protocol + '//vr-demo-1255877297.cos.ap-guangzhou.myqcloud.com/'\r\n\r\n    console.log(prefix, '---prefix')\r\n    // 对更多字符编码的 url encode 格式\r\n    const camSafeUrlEncode = function (str) {\r\n        return encodeURIComponent(str)\r\n            .replace(/!/g, '%21')\r\n            .replace(/'/g, '%27')\r\n            .replace(/\\(/g, '%28')\r\n            .replace(/\\)/g, '%29')\r\n            .replace(/\\*/g, '%2A')\r\n    }\r\n\r\n    const autoRotate = useSelector(selectAutoRotate())\r\n    // 新增场景表单\r\n    const [sceneForm] = Form.useForm()\r\n    // 配置信息表单\r\n    const [configForm] = Form.useForm()\r\n\r\n    const [secretKey, setSecretKey] = useState({})\r\n\r\n    const cosRef = useRef()\r\n\r\n    const [activeConfig, setActiveConfig] = useState({\r\n        // 配置信息\r\n        name: '',\r\n        id: '',\r\n        url: '',\r\n        active: true,\r\n        autoRotate: false, //是否自动旋转\r\n        // 锚点信息\r\n        anchorPoint: [\r\n            {\r\n                point: {\r\n                    x: 180.01349809670057,\r\n                    y: 15.79023683858044,\r\n                    z: 465.07418151652786,\r\n                },\r\n                id: '2102091411',\r\n                name: '海边',\r\n                iconUrl: 'haibian',\r\n            },\r\n        ],\r\n    })\r\n\r\n    // 创建新项目使用数据\r\n    const [createProject, setCreateProject] = useState({\r\n        scenceid: '',\r\n        name: '',\r\n        url: '',\r\n        is_default: 1,\r\n        status: 0,\r\n        anchor_list: [],\r\n    })\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    // 获取默认数据\r\n    useEffect(() => {\r\n        setActiveConfig(panoramicData[0])\r\n        if (panoramicData.length > 0) {\r\n            // 并打开当前场景数据\r\n            changeView(panoramicData[0].id)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (JSON.stringify(secretKey) !== '{}') {\r\n            cosRef.current = new COS({\r\n                SecretId: secretKey.temp_key.credentials.tmpSecretId,\r\n                SecretKey: secretKey.temp_key.credentials.tmpSecretKey,\r\n            })\r\n        }\r\n    }, [secretKey])\r\n\r\n    // 配置信息\r\n    const onGenderChange = value => {\r\n        switch (value) {\r\n            case 'male':\r\n                configForm.setFieldsValue({ note: 'Hi, man!' })\r\n                return\r\n            case 'female':\r\n                configForm.setFieldsValue({ note: 'Hi, lady!' })\r\n                return\r\n            case 'other':\r\n                configForm.setFieldsValue({ note: 'Hi there!' })\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    // 切换场景 根据点击ID 修改场景信息\r\n    const changeView = key => {\r\n        console.log(key, activeId, '当前高亮')\r\n        if (key && key !== activeId) {\r\n            console.log('执行changeg')\r\n            dispatch(actions.changeVrView(key))\r\n        }\r\n    }\r\n\r\n    // 打开新增场景弹窗\r\n    const openModal = () => {\r\n        sceneForm.resetFields()\r\n        setCreateProject({\r\n            uni_scene_id: '',\r\n            name: '',\r\n            url: '',\r\n            is_default: 1,\r\n            status: 0,\r\n            anchor_list: [],\r\n        })\r\n        setIsModalVisible(true)\r\n        getKey().then(res => {\r\n            if (res.status) {\r\n                setSecretKey(res.data)\r\n            }\r\n            console.log(res, '0000')\r\n        })\r\n    }\r\n    // 保存数据 添加到场景数据 关闭弹窗\r\n    const handleOk = () => {\r\n        sceneForm\r\n            .validateFields()\r\n            .then(res => {\r\n                console.log(res, '---sceneForm')\r\n                let activeId = uuidv4()\r\n                let endScen = Object.assign(createProject, {\r\n                    uni_scene_id: activeId,\r\n                    url: res.url,\r\n                    name: res.name,\r\n                })\r\n                dispatch(actions.addScence(endScen))\r\n                setTimeout(() => [dispatch(actions.changeVrView(activeId))], 0)\r\n                setIsModalVisible(false)\r\n            })\r\n            .catch(err => {})\r\n    }\r\n\r\n    // 清空参数 关闭弹窗\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    // 获取到当前高亮数据信息 展示对应的设置信息\r\n    // 如果没有切换 则默认设置 数据中第一项为 当前展示\r\n    const uploadBase64 = async file => {\r\n        const reader = new FileReader()\r\n        reader.readAsDataURL(file)\r\n        reader.onload = () => {\r\n            uploadBase({\r\n                name: file.name,\r\n                file: reader.result,\r\n            })\r\n                .then(res => {\r\n                  console.log(res, '上传返回')\r\n                  message.success('上传完成可以继续')\r\n                    sceneForm.setFieldsValue({ url: res.data.url })\r\n                })\r\n                .catch(err => {})\r\n        }\r\n    }\r\n\r\n    //\r\n    // 文件上传\r\n    const uploadProps = {\r\n        action: prefix,\r\n        customRequest: file => {\r\n            console.log(file, '---file')\r\n            uploadBase64(file.file)\r\n        },\r\n        beforeUpload: file => {},\r\n    }\r\n    // const normFile = e => {\r\n    //     console.log('Upload event:', e)\r\n    //     return e && [{ url: 'e.fileList' }]\r\n    // }\r\n\r\n    return (\r\n        <div style={{ overflow: 'auto' }}>\r\n            <Space direction='vertical' style={{ width: '100%' }}>\r\n                <Card title='操作台' style={{ width: '100%' }}>\r\n                    <Button\r\n                        block\r\n                        icon={<PlusSquareOutlined />}\r\n                        onClick={() => {\r\n                            openModal()\r\n                        }}\r\n                        type='primary'\r\n                        ghost\r\n                    >\r\n                        添加场景\r\n                    </Button>\r\n                    <Form.Item name='' label='标注投放：'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={isHotspot}\r\n                            onChange={() => dispatch(actions.changeIsHotspot(!isHotspot))}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name='' label='是否删除标注'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={isDelete}\r\n                            onChange={() => dispatch(actions.changeIsDelete(!isDelete))}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name='' label='是否自动旋转'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={autoRotate}\r\n                            onChange={useMemo(\r\n                                () => () => dispatch(actions.changeAutoRotate(!autoRotate)),\r\n                                [autoRotate, dispatch]\r\n                            )}\r\n                        />\r\n                    </Form.Item>\r\n                </Card>\r\n                <Card title='配置信息' style={{ width: '100%' }}>\r\n                    <Form form={configForm}>\r\n                        <Form.Item name='' label='锚点名称' rules={[{ required: true }]}>\r\n                            <Input style={{ width: 120 }} />\r\n                        </Form.Item>\r\n                        <Form.Item name='gender' label='跳转场景' rules={[{ required: true }]}>\r\n                            <Select\r\n                                style={{ width: 120 }}\r\n                                placeholder='Select a option and change input text above'\r\n                                onChange={onGenderChange}\r\n                                allowClear\r\n                            >\r\n                                <Option value='male'>male</Option>\r\n                                <Option value='female'>female</Option>\r\n                                <Option value='other'>other</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) =>\r\n                                prevValues.gender !== currentValues.gender\r\n                            }\r\n                        >\r\n                            {({ getFieldValue }) => {\r\n                                return getFieldValue('gender') === 'other' ? (\r\n                                    <Form.Item\r\n                                        name='customizeGender'\r\n                                        label='Customize Gender'\r\n                                        rules={[{ required: true }]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                ) : null\r\n                            }}\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n                <Card title={projectData.name} style={{ width: '100%' }}>\r\n                    <Collapse onChange={changeView} accordion defaultActiveKey={[activeId]}>\r\n                        {panoramicData.map(panoramic => {\r\n                            return (\r\n                                <Panel header={panoramic.name} key={panoramic.uni_scene_id}>\r\n                                    <Collapse>\r\n                                        {panoramic.anchor_list &&\r\n                                            panoramic.anchor_list.length &&\r\n                                            panoramic.anchor_list.map(anchor => {\r\n                                                return (\r\n                                                    <Panel\r\n                                                        header={anchor.name}\r\n                                                        key={anchor.id}\r\n                                                    ></Panel>\r\n                                                )\r\n                                            })}\r\n                                    </Collapse>\r\n                                </Panel>\r\n                            )\r\n                        })}\r\n                    </Collapse>\r\n                </Card>\r\n            </Space>\r\n            <Modal\r\n                title='请上传全景图'\r\n                visible={isModalVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n            >\r\n                <Form form={sceneForm} name='scene'>\r\n                    <Form.Item label='场景名称' name='name' rules={[{ required: true }]}>\r\n                        <Input style={{ width: 120 }} />\r\n                    </Form.Item>\r\n                    <Form.Item label='请上传全景图片' name='url' rules={[{ required: true }]}>\r\n                        <Upload {...uploadProps}>\r\n                            <Button icon={<UploadOutlined />}>Upload</Button>\r\n                        </Upload>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edit\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\Header\\index.js",["145","146","147","148","149"],"import React, { useMemo } from 'react'\r\nimport { Button, Row, Col, message } from 'antd'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { BrowserRouter as Router, Route, Switch, useParams, useLocation } from 'react-router-dom'\r\nimport qs from 'qs'\r\n\r\nimport {\r\n    // selectIsHotspot,\r\n    // selectIsDelete,\r\n    // selectActiveId,\r\n    selectPanoramicData,\r\n    // selectAutoRotate,\r\n} from '../reselect'\r\n\r\nimport { addscene } from '../../../../api/index'\r\n\r\nconst Header = () => {\r\n    const history = useHistory()\r\n\r\n    const location = useLocation()\r\n    const panoramicData = useSelector(selectPanoramicData()) // 项目数据\r\n    const query = useMemo(() => {\r\n        return qs.parse(location.search.slice(1))\r\n    }, [location.search])\r\n\r\n    const release = () => {\r\n        console.log(query)\r\n        const params = {\r\n            project_id: query.id,\r\n            scene_list: panoramicData,\r\n        }\r\n        addscene(params).then(res => {\r\n            console.log(res, '提交返回结果')\r\n            if (res.status) {\r\n                message.success('提交成功', () => {\r\n                    history.push('/admin')\r\n                })\r\n            }\r\n        })\r\n        console.log(panoramicData, '--panoramicData')\r\n    }\r\n\r\n    return (\r\n        <Row justify='end'>\r\n            <Col span={4}>\r\n                <Button\r\n                    type='primary'\r\n                    onClick={() => {\r\n                        release()\r\n                    }}\r\n                >\r\n                    发布\r\n                </Button>\r\n                <Button>\r\n                    <Link to='/view'>预览</Link>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\ExhibitionView\\index.js",["150","151","152","153","154"],"import React, { useEffect, useRef, useMemo, useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport OrbitControls from 'three-orbitcontrols'\r\nimport { getScene } from '../../../api/index'\r\n\r\nimport { BrowserRouter as Router, Route, Switch, useParams, useLocation } from 'react-router-dom'\r\nimport qs from 'qs'\r\n\r\n\r\nimport hotspot from 'static/images/hotspot.jpg'\r\n\r\nimport './index.css'\r\n\r\nconst ExhibitionView = () => {\r\n    const location = useLocation()\r\n    const query = useMemo(() => {\r\n        return qs.parse(location.search.slice(1))\r\n    }, [location.search])\r\n\r\n    const panoramicData =[]\r\n  \r\n    // const forType = 'Equirectangular'f\r\n    let scene\r\n    //  1、 透视相机                        可查看视野角度            长宽比                     近截面 和远截面\r\n    let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1500)\r\n    /**\r\n     *  透视相机四个参数 ：视野角度\r\n     *      长宽比\r\n     *      近截面\r\n     *      远截面\r\n     **/\r\n\r\n    let mesh\r\n\r\n    let renderer = new THREE.WebGLRenderer({ antialias: true })\r\n\r\n    // -------------自定义滑动查看------------------------------\r\n    // 用户是否交互\r\n    // let isUserInteracting = false\r\n    //  const [isUserInteracting, setIsUserInteracting] = useState(false);\r\n    // let phi = 0\r\n    // let theta = 0\r\n    // -------------自定义滑动查看------------------------------\r\n\r\n    // 控制器 对象\r\n    let controls\r\n\r\n    // const dispatch = useDispatch()\r\n    const [onLineProject, setOnLineProject] = useState({});\r\n\r\n    const drawedHotspotsData = useRef([])\r\n\r\n    const getData = () => {\r\n        console.log( query.id, '---query.id')\r\n        getScene({project_id:query.id}).then(res => {\r\n          console.log(res)\r\n          res.data.forEach(item => {\r\n            if (item.id === Number(query.id)) {\r\n              setOnLineProject(item)\r\n            }\r\n          })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n        // changeView('2102271653')\r\n        // animate()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n  \r\n    useEffect(() => {\r\n      \r\n    \r\n    }, [onLineProject])\r\n\r\n    //  初始化\r\n    const init = vrImgurl => {\r\n        scene = new THREE.Scene()\r\n        let container = document.getElementById('container')\r\n        if (container.childNodes.length) {\r\n            container.removeChild(container.childNodes[0])\r\n        }\r\n\r\n        mesh && scene.remove(mesh)\r\n        let width = window.innerWidth\r\n        let height = window.innerHeight\r\n        // if (vrImgurl.length > 1) {\r\n        //     alert('抱歉，一张图请选择panorama1，六张图请选择panorama6且只支持cubeFaces')\r\n        //     return\r\n        // }\r\n        //   //  三维坐标轴\r\n        // var axesHelper = new THREE.AxesHelper(150);\r\n        // scene.add(axesHelper);\r\n\r\n        camera.target = new THREE.Vector3(0, 0, 0)\r\n        camera.position.set(-10, 0, -10)\r\n        // SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength)\r\n        // - radius：球体半径\r\n        // - widthSegments,\r\n        // - heightSegments：水平方向和垂直方向上分段数。widthSegments最小值为3，默认值为8。heightSegments最小值为2，默认值为6。\r\n        // - phiStart：水平方向上的起始角,默认值0\r\n        // - phiLenght：水平方向上球体曲面覆盖的弧度，默认Math.PI * 2\r\n        // - thetaStart : 垂直方向上的起始角， 默认0\r\n        // - thetaLength: 垂直方向是球体曲面覆盖的弧度，默认值为Math.PI\r\n        const geometry = new THREE.SphereGeometry(500, 60, 40)\r\n        geometry.scale(-1, 1, 1)\r\n        //防止跨域用canvas作为纹理\r\n        let canvas = document.createElement('canvas')\r\n        canvas.style.backgroundColor = 'rgba(255,255,255,0)'\r\n        let context = canvas.getContext('2d')\r\n        let img = new Image()\r\n        img.src = vrImgurl\r\n        img.onload = function () {\r\n            canvas.width = width\r\n            canvas.height = height\r\n            context.drawImage(img, 0, 0, width, height)\r\n            let demo = new THREE.TextureLoader().load(vrImgurl)\r\n            let material = new THREE.MeshBasicMaterial({\r\n                map: demo, // 此处使用 demo 的参数 图片更为清晰\r\n                transparent: false,\r\n            })\r\n            mesh = new THREE.Mesh(geometry, material)\r\n            scene.add(mesh)\r\n        }\r\n\r\n        //画已经保存的热点\r\n        setTimeout(() => {\r\n            drawJumpHotSpots(drawedHotspotsData.current, '')\r\n        }, 0)\r\n\r\n        renderer.setPixelRatio(window.devicePixelRatio)\r\n        //确保区域大小\r\n        renderer.setSize(width, height)\r\n        container.appendChild(renderer.domElement)\r\n\r\n        // 当鼠标指针移动到元素上方，并按下鼠标按键（左、右键均可）\r\n        document\r\n            .getElementsByTagName('canvas')[0]\r\n            .addEventListener('mousedown', onDocumentMouseDown, false)\r\n        initcontrols()\r\n    }\r\n\r\n    // 初始化控制器\r\n    const initcontrols = () => {\r\n        controls = new OrbitControls(camera, renderer.domElement)\r\n        //是否可以缩放\r\n        controls.enableZoom = false\r\n        //是否自动旋转\r\n        // controls.autoRotate = true\r\n        // 使动画循环使用时阻尼或自转 意思是否有惯性\r\n        controls.enableDamping = true\r\n        controls.zoom0 = 0\r\n        controls.zoomSpeed = 0\r\n    }\r\n\r\n    // 递归调用\r\n    const animate = () => {\r\n        // update()\r\n        controls && controls.update()\r\n        requestAnimationFrame(animate)\r\n        renderer.render(scene, camera)\r\n    }\r\n\r\n    //绘制多个跳转热点\r\n    const drawJumpHotSpots = (variable, newsrc) => {\r\n        console.log(variable, '数据')\r\n        variable.forEach(item => {\r\n            let textImg = getCanvasFont(100, 20, item.name, '#fff')\r\n            let position = item.point\r\n            let canvas = document.createElement('canvas')\r\n            // canvas.style.backgroundColor = 'rgba(255,255,255,0)'\r\n            let context = canvas.getContext('2d')\r\n            canvas.width = 128\r\n            canvas.height = 128\r\n            let img = new Image()\r\n            img.src = hotspot\r\n            img.onload = function () {\r\n                context.drawImage(img, 0, 0, 128, 128)\r\n                // 纹理 添加canvas 图片\r\n                let texture = new THREE.Texture(textImg) // 此处将 图片跟文字画到同一个数据中\r\n                texture.needsUpdate = true // 将其设置为true，以便在下次使用纹理时触发一次更新\r\n                texture.minFilter = THREE.LinearFilter //当一个纹素覆盖小于一个像素时，贴图将如何采样。默认值为THREE.LinearMipmapLinearFilter， 它将使用mipmapping以及三次线性滤镜。\r\n                var spriteMaterial = new THREE.SpriteMaterial({\r\n                    map: texture,\r\n                    transparent: false,\r\n                })\r\n                var sprite = new THREE.Sprite(spriteMaterial)\r\n                sprite.scale.set(30, 30, 30)\r\n                /**\r\n                 * 此处添加自定义属性 不能跟原有属性重复避免报错\r\n                 * name: 添加锚点名称\r\n                 * ids: 唯一ID\r\n                 * iconUrl: 图标\r\n                 */\r\n                sprite.name = item.name\r\n                sprite.ids = item.id\r\n                sprite.iconUrl = ''\r\n                let rate = 0.8\r\n                var endV = new THREE.Vector3(\r\n                    position.x * rate,\r\n                    position.y * rate,\r\n                    position.z * rate\r\n                )\r\n                sprite.position.copy(endV)\r\n                scene.add(sprite)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 鼠標点击添加一个 确定点击位置  --  锚点 ---待配置 热点图片\r\n    const onDocumentMouseDown = event => {\r\n        // isUserInteracting = true\r\n        event.preventDefault()\r\n        // let vector = new THREE.Vector3() //三维坐标对象\r\n        let vector = camera.target\r\n        vector.set(\r\n            (event.clientX / window.innerWidth) * 2 - 1,\r\n            -(event.clientY / window.innerHeight) * 2 + 1,\r\n            0.5\r\n        )\r\n        vector.unproject(camera)\r\n        let raycaster = new THREE.Raycaster(\r\n            camera.position,\r\n            vector.sub(camera.position).normalize() //初始化\r\n        )\r\n        raycaster.camera = camera\r\n        let intersects = raycaster.intersectObjects(scene.children)\r\n        // 此处点击 判断是否点击锚点 如果是则跳转\r\n        console.log(intersects, '---intersects')\r\n        const target = intersects[0]\r\n        if (target.object.type.toLowerCase() === 'sprite') {\r\n            changeView(target.object.ids)\r\n        }\r\n    }\r\n\r\n    const getCanvasFont = (w, h, textValue, fontColor) => {\r\n        var canvas = document.createElement('canvas')\r\n        canvas.width = w\r\n        canvas.height = h\r\n        var ctx = canvas.getContext('2d')\r\n        ctx.fillStyle = '#ff0000' //textBackground;\r\n        ctx.fillRect(0, 0, w, h)\r\n        ctx.font = h + \"px '微软雅黑'\"\r\n        ctx.textAlign = 'center'\r\n        ctx.textBaseline = 'middle'\r\n        ctx.fillStyle = fontColor\r\n        ctx.fillText(textValue, w / 2, h / 2 + 3)\r\n        //document.body.appendChild(canvas);\r\n        return canvas\r\n    }\r\n\r\n    const changeView = id => {\r\n        // 初始化锚点数据\r\n        drawedHotspotsData.current = []\r\n        let showVr = []\r\n        panoramicData.forEach(item => {\r\n            if (item.id === id) {\r\n                showVr.push(item)\r\n                // 锚点 切换场景应当切换锚点数据\r\n                drawedHotspotsData.current = item.anchorPoint\r\n            }\r\n        })\r\n        console.log(showVr, '--showVr[0]')\r\n        init(showVr[0].url)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div id='container' className='panoramaContent'></div>\r\n\r\n            <div className='listView'>\r\n                {onLineProject.map(vrItem => {\r\n                    return (\r\n                        <div\r\n                            key={vrItem.uni_scene_id}\r\n                            className={'listBox'}\r\n                            onClick={() => changeView(vrItem.uni_scene_id)}\r\n                        >\r\n                            <img className={'listImg'} src={vrItem.url} alt='' />\r\n                            <div>{vrItem.name}</div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ExhibitionView\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Demo\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\OnLineProject\\Design\\index.js",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":15,"column":10,"nodeType":"161","messageId":"162","endLine":15,"endColumn":26},{"ruleId":"159","severity":1,"message":"163","line":15,"column":28,"nodeType":"161","messageId":"162","endLine":15,"endColumn":40},{"ruleId":"159","severity":1,"message":"164","line":15,"column":42,"nodeType":"161","messageId":"162","endLine":15,"endColumn":57},{"ruleId":"159","severity":1,"message":"165","line":17,"column":9,"nodeType":"161","messageId":"162","endLine":17,"endColumn":16},{"ruleId":"159","severity":1,"message":"166","line":19,"column":9,"nodeType":"161","messageId":"162","endLine":19,"endColumn":17},{"ruleId":"159","severity":1,"message":"167","line":31,"column":12,"nodeType":"161","messageId":"162","endLine":31,"endColumn":24},{"ruleId":"168","severity":1,"message":"169","line":57,"column":8,"nodeType":"170","endLine":57,"endColumn":10,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":18,"column":25,"nodeType":"174","endLine":18,"endColumn":28},{"ruleId":"172","severity":1,"message":"173","line":45,"column":17,"nodeType":"174","endLine":45,"endColumn":20},{"ruleId":"159","severity":1,"message":"175","line":1,"column":45,"nodeType":"161","messageId":"162","endLine":1,"endColumn":56},{"ruleId":"159","severity":1,"message":"176","line":9,"column":27,"nodeType":"161","messageId":"162","endLine":9,"endColumn":33},{"ruleId":"159","severity":1,"message":"177","line":9,"column":35,"nodeType":"161","messageId":"162","endLine":9,"endColumn":40},{"ruleId":"159","severity":1,"message":"178","line":9,"column":42,"nodeType":"161","messageId":"162","endLine":9,"endColumn":48},{"ruleId":"159","severity":1,"message":"179","line":9,"column":50,"nodeType":"161","messageId":"162","endLine":9,"endColumn":59},{"ruleId":"159","severity":1,"message":"180","line":24,"column":8,"nodeType":"161","messageId":"162","endLine":24,"endColumn":14},{"ruleId":"159","severity":1,"message":"181","line":25,"column":8,"nodeType":"161","messageId":"162","endLine":25,"endColumn":15},{"ruleId":"159","severity":1,"message":"182","line":26,"column":8,"nodeType":"161","messageId":"162","endLine":26,"endColumn":14},{"ruleId":"159","severity":1,"message":"183","line":27,"column":8,"nodeType":"161","messageId":"162","endLine":27,"endColumn":15},{"ruleId":"159","severity":1,"message":"184","line":54,"column":11,"nodeType":"161","messageId":"162","endLine":54,"endColumn":27},{"ruleId":"159","severity":1,"message":"167","line":73,"column":12,"nodeType":"161","messageId":"162","endLine":73,"endColumn":24},{"ruleId":"168","severity":1,"message":"169","line":113,"column":8,"nodeType":"170","endLine":113,"endColumn":10,"suggestions":"185"},{"ruleId":"159","severity":1,"message":"186","line":4,"column":10,"nodeType":"161","messageId":"162","endLine":4,"endColumn":21},{"ruleId":"159","severity":1,"message":"176","line":5,"column":27,"nodeType":"161","messageId":"162","endLine":5,"endColumn":33},{"ruleId":"159","severity":1,"message":"177","line":5,"column":35,"nodeType":"161","messageId":"162","endLine":5,"endColumn":40},{"ruleId":"159","severity":1,"message":"178","line":5,"column":42,"nodeType":"161","messageId":"162","endLine":5,"endColumn":48},{"ruleId":"159","severity":1,"message":"179","line":5,"column":50,"nodeType":"161","messageId":"162","endLine":5,"endColumn":59},{"ruleId":"159","severity":1,"message":"176","line":6,"column":27,"nodeType":"161","messageId":"162","endLine":6,"endColumn":33},{"ruleId":"159","severity":1,"message":"177","line":6,"column":35,"nodeType":"161","messageId":"162","endLine":6,"endColumn":40},{"ruleId":"159","severity":1,"message":"178","line":6,"column":42,"nodeType":"161","messageId":"162","endLine":6,"endColumn":48},{"ruleId":"159","severity":1,"message":"179","line":6,"column":50,"nodeType":"161","messageId":"162","endLine":6,"endColumn":59},{"ruleId":"159","severity":1,"message":"187","line":161,"column":31,"nodeType":"161","messageId":"162","endLine":161,"endColumn":38},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-unused-vars","'AppstoreOutlined' is defined but never used.","Identifier","unusedVar","'MailOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'SubMenu' is assigned a value but never used.","'TreeNode' is assigned a value but never used.","'activeConfig' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changeView' and 'panoramicData'. Either include them or remove the dependency array.","ArrayExpression",["190"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useCallback' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'useParams' is defined but never used.","'huisuo' is defined but never used.","'haibian' is defined but never used.","'keting' is defined but never used.","'haozhai' is defined but never used.","'camSafeUrlEncode' is assigned a value but never used.",["191"],"'useDispatch' is defined but never used.","'animate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},"Update the dependencies array to be: [changeView, panoramicData]",{"range":"195","text":"196"},{"range":"197","text":"196"},[1776,1778],"[changeView, panoramicData]",[3134,3136]]