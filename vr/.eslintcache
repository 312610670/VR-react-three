[{"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\App.js":"1","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\index.js":"2","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\routeMap.js":"3","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\index.js":"4","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\index.js":"5","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\index.js":"6","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\config.js":"7","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Perviews\\index.js":"8","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reportWebVitals.js":"9","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Edit\\index.js":"10","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reducers.js":"11","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Demo\\index.js":"12","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\rootReducer.js":"13","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reselect.js":"14","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\ExhibitionView\\index.js":"15","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Header\\index.js":"16"},{"size":256,"mtime":1611047734042,"results":"17","hashOfConfig":"18"},{"size":873,"mtime":1610436319529,"results":"19","hashOfConfig":"18"},{"size":577,"mtime":1613632256335,"results":"20","hashOfConfig":"18"},{"size":1182,"mtime":1613729705013,"results":"21","hashOfConfig":"18"},{"size":619,"mtime":1610521381580,"results":"22","hashOfConfig":"18"},{"size":1842,"mtime":1610518898852,"results":"23","hashOfConfig":"18"},{"size":498,"mtime":1610518911726,"results":"24","hashOfConfig":"18"},{"size":17997,"mtime":1614225352907,"results":"25","hashOfConfig":"18"},{"size":362,"mtime":1609224057157,"results":"26","hashOfConfig":"18"},{"size":7570,"mtime":1614138014082,"results":"27","hashOfConfig":"18"},{"size":9854,"mtime":1614222212254,"results":"28","hashOfConfig":"18"},{"size":4228,"mtime":1612688316255,"results":"29","hashOfConfig":"18"},{"size":367,"mtime":1610518898811,"results":"30","hashOfConfig":"18"},{"size":1506,"mtime":1614137367010,"results":"31","hashOfConfig":"18"},{"size":13184,"mtime":1613789196912,"results":"32","hashOfConfig":"18"},{"size":433,"mtime":1613715670365,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"adzifw",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\App.js",[],["72","73"],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\Routers\\routeMap.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\index.js",["74","75","76","77","78"],"import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Preview from './Perviews/index'\r\nimport Edit from './Edit/index'\r\nimport Header from './Header/index'\r\nimport { Button } from 'antd';\r\nimport reducer from './reducers.js';\r\nimport { injectReducer } from 'reducers';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\n\r\ninjectReducer('vrData',reducer)\r\n\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Contenet = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst SidebarWrap = styled.div`\r\n  flex: 0 0 248px;\r\n  width: 248px;\r\n  overflow: auto;\r\n  .ant-tabs {\r\n    overflow: initial !important;\r\n  }\r\n`;\r\n\r\nconst PreviewWrap = styled.div`\r\n  flex: 1;\r\n  width: 100%;\r\n  overflow: auto;\r\n`;\r\n\r\nconst Design = () => {\r\n  return (\r\n    <Container>\r\n      <Header />\r\n      <Contenet>\r\n        <SidebarWrap>\r\n          <Edit/>\r\n        </SidebarWrap>\r\n        <PreviewWrap>\r\n          <Preview />\r\n        </PreviewWrap>\r\n      </Contenet>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Design","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\index.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\index.js",["79"],"/**\r\n * create store\r\n */\r\nimport { configureStore, combineReducers, Reducer } from '@reduxjs/toolkit';\r\n// import { ThunkAction } from 'redux-thunk';\r\nimport rootReducer, { staticReducers } from './rootReducer';\r\n\r\n// store conf\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\n/**\r\n * @param 一些说明：\r\n * 1.  当前的项目架构使用的是单个 store + 初始化时会生成的 rootReducer(这个reducer里只有公用的reducer)\r\n * 1.1 如果需要使用 - 路由懒加载代码分割 - 的模式，那么会导致动态加载的业务模块对应的 reducer 不存在，所以会需要将当前 store 进行合并且重新注入，让业务模块的reducer 可以存在\r\n *\r\n * 2.  还有一种设计模式可以参考：项目中分为多个 store , webpack 的 entry 是动态的, 在 build 时使用 npm run build --moduleName\r\n * 2.1 那么此时每个业务模块的 rootReducer 也就是被 Provider 提供的 store 始终都是会包含当前业务模块的 reducer ，就不会出现以上第一种的情况，也就不需要这个 injectReducer 这个操作\r\n *\r\n * - 不倾向某一种 redux 的设计，按照业务来决定即可\r\n *\r\n */\r\nconst asyncReducers = {};\r\nexport function injectReducer(key, reducer) {\r\n  asyncReducers[key] = reducer;\r\n  const newRootReducer = combineReducers({\r\n    ...staticReducers,\r\n    ...asyncReducers,\r\n  });\r\n  store.replaceReducer(newRootReducer);\r\n}\r\n\r\n// 普通 dispatch\r\n// export type AppDispatch = typeof store.dispatch;\r\n\r\n// 每当我们需要访问 Redux 存储状态时（mapState 函数 | useSelector 选择器）\r\n// export type RootState = ReturnType<typeof rootReducer>;\r\n\r\n// thunk type\r\n// export type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\r\n\r\nexport default store;\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\config.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Perviews\\index.js",["80","81","82","83","84","85","86","87"],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reportWebVitals.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Edit\\index.js",["88","89","90","91","92","93","94"],"import React, { useState,useEffect,useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// imoprt styles from './index.less'\r\nimport { actions } from '../reducers'\r\nimport {\r\n    selectIsHotspot,\r\n    selectIsDelete,\r\n    selectPanoramicData,\r\n  selectProjectData,\r\n  selectActiveId,\r\n  selectAutoRotate\r\n} from '../reselect'\r\n\r\nimport { Switch, Menu, Form, Input, Select, Space, Card, TreeSelect, Collapse } from 'antd'\r\nimport { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons'\r\n\r\nconst { SubMenu } = Menu\r\nconst { Option } = Select\r\nconst { TreeNode } = TreeSelect\r\nconst { Panel } = Collapse\r\nconst Edit = () => {\r\n    const dispatch = useDispatch()\r\n    const isHotspot = useSelector(selectIsHotspot())\r\n    const isDelete = useSelector(selectIsDelete())\r\n    const panoramicData = useSelector(selectPanoramicData()) // 项目数据\r\n    const projectData = useSelector(selectProjectData()) // 项目数据\r\n    const activeId = useSelector(selectActiveId()) // 当前高亮视图ID\r\n    console.log(activeId, '---activeId')\r\n    const autoRotate = useSelector(selectAutoRotate())\r\n  \r\n    const [activeConfig, setActiveConfig] = useState({ //  // 配置信息\r\n      name: '',\r\n      id: '',\r\n      url: '',\r\n      active: true,\r\n      autoRotate: false, //是否自动旋转\r\n      // 锚点信息\r\n      anchorPoint: [\r\n          {\r\n              point: {\r\n                  x: 180.01349809670057,\r\n                  y: 15.79023683858044,\r\n                  z: 465.07418151652786,\r\n              },\r\n              id: '2102091411',\r\n              name: '海边',\r\n              iconUrl: 'haibian',\r\n          },\r\n      ],\r\n    })\r\n  \r\n    // 获取默认数据\r\n  useEffect(() => {\r\n    setActiveConfig( panoramicData[0])\r\n     // 并打开当前场景数据\r\n     changeView(panoramicData[0].id)\r\n    }, [])\r\n  \r\n\r\n\r\n    const [form] = Form.useForm()\r\n    const onGenderChange = value => {\r\n        switch (value) {\r\n            case 'male':\r\n                form.setFieldsValue({ note: 'Hi, man!' })\r\n                return\r\n            case 'female':\r\n                form.setFieldsValue({ note: 'Hi, lady!' })\r\n                return\r\n            case 'other':\r\n                form.setFieldsValue({ note: 'Hi there!' })\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    // 切换场景 根据点击ID 修改场景信息\r\n    const changeView = key => {\r\n        dispatch(actions.changeVrView(key))\r\n        console.log(key)\r\n  }\r\n  \r\n  useEffect(() => {\r\n    console.log(  [activeId],'-----activeId')\r\n   \r\n  }, [activeId])\r\n\r\n    // 获取到当前高亮数据信息 展示对应的设置信息\r\n    // 如果没有切换 则默认设置 数据中第一项为 当前展示\r\n\r\n    return (\r\n  \r\n  <div style={{overflow: 'auto'}}>\r\n            <Space direction='vertical' style={{ width: '100%' }}>\r\n                <Card title='操作台' style={{ width: '100%' }}>\r\n                    <Form.Item name='note' label='标注投放：'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={isHotspot}\r\n                            onChange={() => dispatch(actions.changeIsHotspot(!isHotspot))}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name='note' label='是否删除标注'>\r\n                        <Switch\r\n                            checkedChildren='开启'\r\n                            unCheckedChildren='关闭'\r\n                            checked={isDelete}\r\n                            onChange={() => dispatch(actions.changeIsDelete(!isDelete))}\r\n                        />\r\n            </Form.Item>\r\n            <Form.Item name='note' label='是否自动旋转'>\r\n                            <Switch\r\n                                checkedChildren='开启'\r\n                                unCheckedChildren='关闭'\r\n                                checked={autoRotate}\r\n                                onChange={useMemo(() => () => dispatch(actions.changeAutoRotate(!autoRotate)),[autoRotate, dispatch])}\r\n                            />\r\n                        </Form.Item>\r\n                </Card>\r\n                <Card title='配置信息' style={{ width: '100%' }}>\r\n                    <Form>\r\n                        <Form.Item name='note' label='锚点名称' rules={[{ required: true }]}>\r\n                            <Input style={{ width: 120 }} />\r\n                        </Form.Item>\r\n                        <Form.Item name='gender' label='跳转场景' rules={[{ required: true }]}>\r\n                            <Select\r\n                                style={{ width: 120 }}\r\n                                placeholder='Select a option and change input text above'\r\n                                onChange={onGenderChange}\r\n                                allowClear\r\n                            >\r\n                                <Option value='male'>male</Option>\r\n                                <Option value='female'>female</Option>\r\n                                <Option value='other'>other</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            noStyle\r\n                            shouldUpdate={(prevValues, currentValues) =>\r\n                                prevValues.gender !== currentValues.gender\r\n                            }\r\n                        >\r\n                            {({ getFieldValue }) => {\r\n                                return getFieldValue('gender') === 'other' ? (\r\n                                    <Form.Item\r\n                                        name='customizeGender'\r\n                                        label='Customize Gender'\r\n                                        rules={[{ required: true }]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                ) : null\r\n                            }}\r\n                        </Form.Item>\r\n                      \r\n                    </Form>\r\n                </Card>\r\n                <Card title={projectData.name} style={{ width: '100%' }}>\r\n                    <Collapse onChange={changeView} accordion  defaultActiveKey={[activeId]}>\r\n                        {panoramicData.map(panoramic => {\r\n                            return (\r\n                                <Panel header={panoramic.name} key={panoramic.id}>\r\n                                    <Collapse>\r\n                                        {panoramic.anchorPoint.length &&\r\n                                            panoramic.anchorPoint.map(anchor => {\r\n                                                return (\r\n                                                    <Panel\r\n                                                        header={anchor.name}\r\n                                                        key={anchor.id}\r\n                                                    ></Panel>\r\n                                                )\r\n                                            })}\r\n                                    </Collapse>\r\n                                </Panel>\r\n                            )\r\n                        })}\r\n                    </Collapse>\r\n                </Card>\r\n            </Space>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edit\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reducers.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Demo\\index.js",["95"],"import React, { useEffect } from 'react'\r\nimport * as THREE from 'three';\r\nimport fore from 'static/images/home.jpg'\r\nimport zhengImg from 'static/360D/1.jpg'\r\nimport beiImg from 'static/360D/2.jpg'\r\nimport shangImg from 'static/360D/3.jpg'\r\nimport xiaImg from 'static/360D/4.jpg'\r\nimport zuoImg from 'static/360D/5.jpg'\r\nimport youImg from 'static/360D/6.jpg'\r\n\r\n\r\nimport OrbitControls from 'three-orbitcontrols'\r\n// 场景\r\nvar  scene = new THREE.Scene();\r\n      \r\n// 渲染器\r\nvar renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true }); \r\n\r\n// 相机\r\nvar camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n// 盒子 物体\r\nvar geometry = new THREE.BoxGeometry(50, 50, 50); // 六张图\r\n\r\n// w外层盒子\r\nvar geometryone = new THREE.SphereGeometry(500, 60, 40); // 球体\r\n  geometryone.scale(-1, 1, 1); \r\n\r\n// 背景 \r\nlet material\r\n\r\n// 创建平面\r\nlet cube\r\n\r\nlet controls\r\nconst DemoBox = () => {\r\n\r\n  const init = () => {\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.getElementById('View').appendChild(renderer.domElement);\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    // 六张图 内部物体展示\r\n    let zheng = new THREE.TextureLoader().load(zhengImg)\r\n    let bei = new THREE.TextureLoader().load(beiImg)\r\n    let shang = new THREE.TextureLoader().load(shangImg)\r\n    let xia = new THREE.TextureLoader().load(xiaImg)\r\n    let zuo = new THREE.TextureLoader().load(zuoImg)\r\n    let you = new THREE.TextureLoader().load(youImg)\r\n    const faceMaterialArray = []\r\n    // 给每个面填充不同的材质\r\n    faceMaterialArray.push(new THREE.MeshBasicMaterial({ map: zuo })) //左边\r\n    faceMaterialArray.push(new THREE.MeshBasicMaterial({ map: you })) // 右边\r\n    faceMaterialArray.push(new THREE.MeshBasicMaterial({ map: shang })) //上边\r\n    faceMaterialArray.push(new THREE.MeshBasicMaterial({ map: xia })) // 下边\r\n    faceMaterialArray.push(new THREE.MeshBasicMaterial({ map: zheng })) //正面\r\n    faceMaterialArray.push(new THREE.MeshBasicMaterial({ map: bei })) // 背面\r\n    material = new THREE.MeshFaceMaterial(faceMaterialArray)\r\n   \r\n\r\n    //防止跨域用canvas作为纹理 外部背景 \r\n    let canvas = document.createElement(\"canvas\");\r\n    canvas.style.backgroundColor = \"rgba(255,255,255,0)\";\r\n    let context = canvas.getContext(\"2d\");\r\n    let img = new Image();\r\n    img.src = fore;\r\n    img.onload = function () {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n      context.drawImage(img, 0, 0, window.innerWidth, window.innerHeight);\r\n      let demo = new THREE.TextureLoader().load(fore)\r\n      let materialone = new THREE.MeshBasicMaterial({\r\n        map: demo, // 此处使用 demo 的参数 图片更为清晰\r\n        transparent: false\r\n      });\r\n      let cubeone\r\n      cubeone = new THREE.Mesh(geometryone, materialone);\r\n      scene.add(cubeone);\r\n    };\r\n\r\n\r\n    // 三维坐标轴\r\n    var axesHelper = new THREE.AxesHelper(150);\t\r\n    scene.add(axesHelper);\t\r\n\r\n    // 渲染器 \r\n    // BoxGeometry 这个对象包含了一个立方体中所有的顶点（vertices）和面（faces）\r\n    cube = new THREE.Mesh(geometry, material);\r\n    cube.position.set(-400, -150, 0); // w物体放置位置\r\n    scene.add(cube);\r\n    camera.position.set(300, 200, 0); // 相机位置\r\n    initControls()\r\n  }\r\n  \r\n\r\n  const initControls = () => {\r\n    controls = new OrbitControls(camera, renderer.domElement)\r\n  }\r\n\r\n  const painting = () => {\r\n    var geometry = new THREE.Geometry();\r\n    geometry.vertices.push(new THREE.Vector3( 0, 50, 50) );\r\n    // geometry.vertices.push(new THREE.Vector3( 0, 70, 50) );\r\n    geometry.vertices.push(new THREE.Vector3(100, 100, 100));\r\n    var line = new THREE.Line(geometry, material);\r\n    scene.add( line );\r\n  }\r\n\r\n  \r\n  const animate = () => {\r\n\r\n    controls && controls.update()\r\n    requestAnimationFrame( animate );\r\n    renderer.render( scene, camera );\r\n  }\r\n\r\n  useEffect(() => {\r\n    painting()\r\n    init()\r\n    animate()\r\n    return () => {\r\n      \r\n    };\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div id = 'View'></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DemoBox","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\reducers\\rootReducer.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\reselect.js",[],"C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\ExhibitionView\\index.js",["96","97","98","99","100"],"import React, { useEffect,  useRef } from 'react'\r\nimport * as THREE from 'three'\r\nimport OrbitControls from 'three-orbitcontrols'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectVrData } from '../Design/reselect'\r\nimport {\r\n    selectIsHotspot,\r\n    selectIsDelete,\r\n    selectTestData,\r\n} from '../Design/reselect'\r\n\r\n// import { Button, Switch } from 'antd'\r\n\r\nimport huisuo from 'static/images/huisuo.jpg'\r\nimport haibian from 'static/images/haibian.jpg'\r\nimport keting from 'static/images/keting.jpg'\r\nimport haozhai from 'static/images/haozhai.jpg'\r\n\r\nimport hotspot from 'static/images/hotspot.jpg'\r\n\r\nimport './index.css'\r\n\r\nconst ExhibitionView = () => {\r\n    const forType = 'Equirectangular'\r\n    let scene \r\n    //  1、 透视相机                        可查看视野角度            长宽比                     近截面 和远截面\r\n    let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1500)\r\n    /**\r\n     *  透视相机四个参数 ：视野角度\r\n     *      长宽比\r\n     *      近截面\r\n     *      远截面\r\n     **/\r\n\r\n    let mesh\r\n\r\n    let renderer = new THREE.WebGLRenderer({ antialias: true })\r\n\r\n    // -------------自定义滑动查看------------------------------\r\n    // 用户是否交互\r\n    let isUserInteracting = false\r\n    //  const [isUserInteracting, setIsUserInteracting] = useState(false);\r\n    // 点击X 轴坐标\r\n    let onPointerDownPointerX = 0\r\n    // 点击X 轴坐标\r\n    let onPointerDownPointerY = 0\r\n    let lon = 0\r\n    let lat = 0\r\n    // let phi = 0\r\n    // let theta = 0\r\n    let onPointerDownLon = lon\r\n    let onPointerDownLat = lat\r\n    // -------------自定义滑动查看------------------------------\r\n\r\n    // 控制器 对象\r\n    let controls\r\n\r\n    const dispatch = useDispatch()\r\n    const vrData = useSelector(selectVrData())\r\n    console.log(vrData, '===vrData')\r\n    const isHotspot = useSelector(selectIsHotspot()) // 是否投放跳转点 删除\r\n    const isDelete = useSelector(selectIsDelete()) // 是否投放跳转点 删除\r\n\r\n    // const panoramicData = useSelector(selectPanoramicData()) // 项目数据\r\n    const testData = useSelector(selectTestData()) // 项目数据\r\n    const { panoramicData } = testData\r\n    console.log(JSON.stringify(testData), '-ceshi shuju ')\r\n\r\n    const refIsHotspot = useRef(isHotspot)\r\n    const refIsDelete = useRef(isDelete)\r\n    const drawedHotspotsData = useRef([])\r\n    \r\n\r\n    useEffect(() => {\r\n        changeView('2102271653')\r\n        animate()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        refIsHotspot.current = isHotspot\r\n        refIsDelete.current = isDelete\r\n    }, [isHotspot, isDelete])\r\n    //  初始化\r\n  const init = (imgurl = 'huisuo') => {\r\n        scene = new THREE.Scene()\r\n        let container = document.getElementById('container')\r\n        if (container.childNodes.length) {\r\n            container.removeChild(container.childNodes[0])\r\n        }\r\n        let vrImgurl =\r\n            imgurl === 'imgurl'\r\n                ? huisuo\r\n                : imgurl === 'haibian'\r\n                ? haibian\r\n                : imgurl === 'keting'\r\n                ? keting\r\n                : imgurl === 'haozhai'\r\n                ? haozhai\r\n                : huisuo\r\n        mesh && scene.remove(mesh)\r\n        let width = window.innerWidth\r\n        let height = window.innerHeight\r\n        // if (vrImgurl.length > 1) {\r\n        //     alert('抱歉，一张图请选择panorama1，六张图请选择panorama6且只支持cubeFaces')\r\n        //     return\r\n        // }\r\n        //   //  三维坐标轴\r\n        // var axesHelper = new THREE.AxesHelper(150);\r\n        // scene.add(axesHelper);\r\n\r\n        camera.target = new THREE.Vector3(0, 0, 0)\r\n        camera.position.set(-10, 0, -10)\r\n        // SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength)\r\n        // - radius：球体半径\r\n        // - widthSegments,\r\n        // - heightSegments：水平方向和垂直方向上分段数。widthSegments最小值为3，默认值为8。heightSegments最小值为2，默认值为6。\r\n        // - phiStart：水平方向上的起始角,默认值0\r\n        // - phiLenght：水平方向上球体曲面覆盖的弧度，默认Math.PI * 2\r\n        // - thetaStart : 垂直方向上的起始角， 默认0\r\n        // - thetaLength: 垂直方向是球体曲面覆盖的弧度，默认值为Math.PI\r\n        const geometry = new THREE.SphereGeometry(500, 60, 40)\r\n        geometry.scale(-1, 1, 1)\r\n        //防止跨域用canvas作为纹理\r\n        let canvas = document.createElement('canvas')\r\n        canvas.style.backgroundColor = 'rgba(255,255,255,0)'\r\n        let context = canvas.getContext('2d')\r\n        let img = new Image()\r\n        img.src = vrImgurl\r\n        img.onload = function () {\r\n            canvas.width = width\r\n            canvas.height = height\r\n            context.drawImage(img, 0, 0, width, height)\r\n            let demo = new THREE.TextureLoader().load(vrImgurl)\r\n            let material = new THREE.MeshBasicMaterial({\r\n                map: demo, // 此处使用 demo 的参数 图片更为清晰\r\n                transparent: false,\r\n            })\r\n            mesh = new THREE.Mesh(geometry, material)\r\n            scene.add(mesh)\r\n        }\r\n\r\n        //画已经保存的热点\r\n        setTimeout(() => {\r\n            drawJumpHotSpots(drawedHotspotsData.current, '')\r\n        }, 0)\r\n\r\n        renderer.setPixelRatio(window.devicePixelRatio)\r\n        //确保区域大小\r\n        renderer.setSize(width, height)\r\n        container.appendChild(renderer.domElement)\r\n\r\n        // 当鼠标指针移动到元素上方，并按下鼠标按键（左、右键均可）\r\n        document\r\n            .getElementsByTagName('canvas')[0]\r\n            .addEventListener('mousedown', onDocumentMouseDown, false)\r\n        initcontrols()\r\n    }\r\n\r\n    // 初始化控制器\r\n    const initcontrols = () => {\r\n        controls = new OrbitControls(camera, renderer.domElement)\r\n        //是否可以缩放\r\n        controls.enableZoom = false\r\n        //是否自动旋转\r\n        // controls.autoRotate = true\r\n        // 使动画循环使用时阻尼或自转 意思是否有惯性\r\n        controls.enableDamping = true\r\n        controls.zoom0 = 0\r\n        controls.zoomSpeed = 0\r\n    }\r\n\r\n    // 执行渲染\r\n    // const update = () => {\r\n    //     //控制自动旋转速度\r\n    //     if (isUserInteracting === false) {\r\n    //         lon += 0\r\n    //     }\r\n    //     lat = Math.max(-85, Math.min(85, lat))\r\n    //     phi = THREE.Math.degToRad(90 - lat)\r\n    //     theta = THREE.Math.degToRad(lon) //degToRad()方法返回与参数degrees所表示的角度相等的弧度值\r\n    //     camera.target.x = 500 * Math.sin(phi) * Math.cos(theta)\r\n    //     camera.target.y = 500 * Math.cos(phi)\r\n    //     camera.target.z = 500 * Math.sin(phi) * Math.sin(theta)\r\n    //     camera.lookAt(camera.target)\r\n    //     renderer.render(scene, camera)\r\n    // }\r\n\r\n    // 递归调用\r\n    const animate = () => {\r\n        // update()\r\n        controls && controls.update()\r\n        requestAnimationFrame(animate)\r\n        renderer.render(scene, camera)\r\n    }\r\n\r\n    //绘制多个跳转热点\r\n    const drawJumpHotSpots = (variable, newsrc) => {\r\n        console.log(variable, '数据')\r\n        variable.forEach(item => {\r\n            let textImg = getCanvasFont(100, 20, item.name, '#fff')\r\n            let position = item.point\r\n            let canvas = document.createElement('canvas')\r\n            // canvas.style.backgroundColor = 'rgba(255,255,255,0)'\r\n            let context = canvas.getContext('2d')\r\n            canvas.width = 128\r\n            canvas.height = 128\r\n            let img = new Image()\r\n            img.src = hotspot\r\n            img.onload = function () {\r\n                context.drawImage(img, 0, 0, 128, 128)\r\n                // 纹理 添加canvas 图片\r\n                let texture = new THREE.Texture(textImg) // 此处将 图片跟文字画到同一个数据中\r\n                texture.needsUpdate = true // 将其设置为true，以便在下次使用纹理时触发一次更新\r\n                texture.minFilter = THREE.LinearFilter //当一个纹素覆盖小于一个像素时，贴图将如何采样。默认值为THREE.LinearMipmapLinearFilter， 它将使用mipmapping以及三次线性滤镜。\r\n                var spriteMaterial = new THREE.SpriteMaterial({\r\n                    map: texture,\r\n                    transparent: false,\r\n                })\r\n                var sprite = new THREE.Sprite(spriteMaterial)\r\n                sprite.scale.set(30, 30, 30)\r\n                /**\r\n                 * 此处添加自定义属性 不能跟原有属性重复避免报错\r\n                 * name: 添加锚点名称\r\n                 * ids: 唯一ID\r\n                 * iconUrl: 图标\r\n                 */\r\n                sprite.name = item.name\r\n                sprite.ids = item.id\r\n                sprite.iconUrl = ''\r\n                let rate = 0.8\r\n                var endV = new THREE.Vector3(\r\n                    position.x * rate,\r\n                    position.y * rate,\r\n                    position.z * rate\r\n                )\r\n                sprite.position.copy(endV)\r\n                scene.add(sprite)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 鼠標点击添加一个 确定点击位置  --  锚点 ---待配置 热点图片\r\n    const onDocumentMouseDown = event => {\r\n        isUserInteracting = true\r\n        event.preventDefault()\r\n        // let vector = new THREE.Vector3() //三维坐标对象\r\n        let vector = camera.target\r\n        vector.set(\r\n            (event.clientX / window.innerWidth) * 2 - 1,\r\n            -(event.clientY / window.innerHeight) * 2 + 1,\r\n            0.5\r\n        )\r\n        vector.unproject(camera)\r\n        let raycaster = new THREE.Raycaster(\r\n            camera.position,\r\n            vector.sub(camera.position).normalize() //初始化\r\n        )\r\n        raycaster.camera = camera\r\n        let intersects = raycaster.intersectObjects(scene.children)\r\n        // 此处点击 判断是否点击锚点 如果是则跳转\r\n        console.log(intersects, '---intersects')\r\n        const target = intersects[0]\r\n        if (target.object.type.toLowerCase() === 'sprite') {\r\n            changeView(target.object.ids)\r\n        }\r\n        onPointerDownPointerX = event.clientX\r\n        onPointerDownPointerY = event.clientY\r\n        onPointerDownLon = lon\r\n        onPointerDownLat = lat\r\n    }\r\n\r\n    const getCanvasFont = (w, h, textValue, fontColor) => {\r\n        var canvas = document.createElement('canvas')\r\n        canvas.width = w\r\n        canvas.height = h\r\n        var ctx = canvas.getContext('2d')\r\n        ctx.fillStyle = '#ff0000' //textBackground;\r\n        ctx.fillRect(0, 0, w, h)\r\n        ctx.font = h + \"px '微软雅黑'\"\r\n        ctx.textAlign = 'center'\r\n        ctx.textBaseline = 'middle'\r\n        ctx.fillStyle = fontColor\r\n        ctx.fillText(textValue, w / 2, h / 2 + 3)\r\n        //document.body.appendChild(canvas);\r\n        return canvas\r\n    }\r\n\r\n    // 鼠标滑动 全景查看\r\n    const onDocumentMouseMove = event => {\r\n        if (isUserInteracting === true) {\r\n            console.log('可以移动')\r\n            lon = (onPointerDownPointerX - event.clientX) * 0.1 + onPointerDownLon\r\n            lat = (event.clientY - onPointerDownPointerY) * 0.1 + onPointerDownLat\r\n        }\r\n    }\r\n\r\n    // 鼠标交互结束\r\n    const onDocumentMouseUp = () => {\r\n        isUserInteracting = false\r\n    }\r\n\r\n    const changeView = id => {\r\n        // 初始化锚点数据\r\n        drawedHotspotsData.current = []\r\n        let showVr = []\r\n        panoramicData.forEach(item => {\r\n            if (item.id === id) {\r\n                showVr.push(item)\r\n                // 锚点 切换场景应当切换锚点数据\r\n                drawedHotspotsData.current = item.anchorPoint\r\n            }\r\n        })\r\n      console.log(showVr,'--showVr[0]')\r\n        init(showVr[0].url)\r\n    }\r\n\r\n    // const changeView = (id) => {\r\n    //   console.log(panoramicData, 'panoramicData',id)\r\n    //   let showVr =[]\r\n    //   showVr = panoramicData.filter(item => {\r\n    //     return item.id === id\r\n    //   })\r\n    //   console.log(showVr[0],'showVr.url')\r\n    //   init(showVr[0].url)\r\n    // }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div id='container' className='panoramaContent'></div>\r\n\r\n            <div className='listView'>\r\n                {panoramicData.map(vrItem => {\r\n                    return (\r\n                        <div\r\n                            key={vrItem.id}\r\n                            className={'listBox'}\r\n                            onClick={() => changeView(vrItem.id)}\r\n                        >\r\n                            <img className={'listImg'} src='./static/images/haibian.jpg' alt='' />\r\n                            <div>{vrItem.name}</div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ExhibitionView\r\n","C:\\Users\\litz01\\Desktop\\my-project\\react-pc\\vr\\src\\views\\VrViews\\Design\\Header\\index.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"109","line":6,"column":10,"nodeType":"107","messageId":"108","endLine":6,"endColumn":16},{"ruleId":"105","severity":1,"message":"110","line":9,"column":10,"nodeType":"107","messageId":"108","endLine":9,"endColumn":16},{"ruleId":"105","severity":1,"message":"111","line":9,"column":18,"nodeType":"107","messageId":"108","endLine":9,"endColumn":23},{"ruleId":"105","severity":1,"message":"112","line":9,"column":25,"nodeType":"107","messageId":"108","endLine":9,"endColumn":33},{"ruleId":"105","severity":1,"message":"113","line":4,"column":43,"nodeType":"107","messageId":"108","endLine":4,"endColumn":50},{"ruleId":"105","severity":1,"message":"114","line":1,"column":36,"nodeType":"107","messageId":"108","endLine":1,"endColumn":43},{"ruleId":"105","severity":1,"message":"115","line":7,"column":10,"nodeType":"107","messageId":"108","endLine":7,"endColumn":22},{"ruleId":"116","severity":1,"message":"117","line":87,"column":8,"nodeType":"118","endLine":87,"endColumn":30,"suggestions":"119"},{"ruleId":"105","severity":1,"message":"120","line":377,"column":11,"nodeType":"107","messageId":"108","endLine":377,"endColumn":17},{"ruleId":"105","severity":1,"message":"121","line":419,"column":11,"nodeType":"107","messageId":"108","endLine":419,"endColumn":24},{"ruleId":"105","severity":1,"message":"122","line":445,"column":11,"nodeType":"107","messageId":"108","endLine":445,"endColumn":28},{"ruleId":"105","severity":1,"message":"123","line":446,"column":9,"nodeType":"107","messageId":"108","endLine":446,"endColumn":26},{"ruleId":"105","severity":1,"message":"124","line":450,"column":11,"nodeType":"107","messageId":"108","endLine":450,"endColumn":26},{"ruleId":"105","severity":1,"message":"125","line":15,"column":10,"nodeType":"107","messageId":"108","endLine":15,"endColumn":26},{"ruleId":"105","severity":1,"message":"126","line":15,"column":28,"nodeType":"107","messageId":"108","endLine":15,"endColumn":40},{"ruleId":"105","severity":1,"message":"127","line":15,"column":42,"nodeType":"107","messageId":"108","endLine":15,"endColumn":57},{"ruleId":"105","severity":1,"message":"128","line":17,"column":9,"nodeType":"107","messageId":"108","endLine":17,"endColumn":16},{"ruleId":"105","severity":1,"message":"129","line":19,"column":9,"nodeType":"107","messageId":"108","endLine":19,"endColumn":17},{"ruleId":"105","severity":1,"message":"130","line":31,"column":12,"nodeType":"107","messageId":"108","endLine":31,"endColumn":24},{"ruleId":"116","severity":1,"message":"131","line":57,"column":8,"nodeType":"118","endLine":57,"endColumn":10,"suggestions":"132"},{"ruleId":"116","severity":1,"message":"133","line":123,"column":6,"nodeType":"118","endLine":123,"endColumn":8,"suggestions":"134"},{"ruleId":"105","severity":1,"message":"135","line":25,"column":11,"nodeType":"107","messageId":"108","endLine":25,"endColumn":18},{"ruleId":"105","severity":1,"message":"136","line":59,"column":11,"nodeType":"107","messageId":"108","endLine":59,"endColumn":19},{"ruleId":"116","severity":1,"message":"137","line":78,"column":8,"nodeType":"118","endLine":78,"endColumn":10,"suggestions":"138"},{"ruleId":"105","severity":1,"message":"139","line":290,"column":11,"nodeType":"107","messageId":"108","endLine":290,"endColumn":30},{"ruleId":"105","severity":1,"message":"122","line":299,"column":11,"nodeType":"107","messageId":"108","endLine":299,"endColumn":28},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'Reducer' is defined but never used.","'useMemo' is defined but never used.","'selectVrData' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'animate', 'changeView', and 'initcontrols'. Either include them or remove the dependency array.","ArrayExpression",["142"],"'addDsc' is assigned a value but never used.","'getCanvasFont' is assigned a value but never used.","'onDocumentMouseUp' is assigned a value but never used.","'isUserInteracting' is assigned a value but never used.","'isHotspotChange' is assigned a value but never used.","'AppstoreOutlined' is defined but never used.","'MailOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'SubMenu' is assigned a value but never used.","'TreeNode' is assigned a value but never used.","'activeConfig' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'changeView' and 'panoramicData'. Either include them or remove the dependency array.",["143"],"React Hook useEffect has missing dependencies: 'animate' and 'init'. Either include them or remove the dependency array.",["144"],"'forType' is assigned a value but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'animate' and 'changeView'. Either include them or remove the dependency array.",["145"],"'onDocumentMouseMove' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [activeId, animate, autoRotate, changeView, initcontrols]",{"range":"154","text":"155"},"Update the dependencies array to be: [changeView, panoramicData]",{"range":"156","text":"157"},"Update the dependencies array to be: [animate, init]",{"range":"158","text":"159"},"Update the dependencies array to be: [animate, changeView]",{"range":"160","text":"161"},[2578,2600],"[activeId, animate, autoRotate, changeView, initcontrols]",[1776,1778],"[changeView, panoramicData]",[3868,3870],"[animate, init]",[2352,2354],"[animate, changeView]"]